
% Copyright 2011 Alexander Peyser & Wolfgang Nonner
%
% This file is part of Deuterostome.
%
% This program is free software: you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation, either version 2 of the License, or
% (at your option) any later version.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY% without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program.  If not, see <http://www.gnu.org/licenses/>.

(%%[ Loading: Form_1 6/25/96 WN ]%%\n\015) print flush


2000 dict begin          % the backbone dictionary
    /codebuffer 20000 string def   % for backbone WP text

%============== Formatter: Journal of General Physiology ===============

% Single-column pages; page# appears on bottom center.
% Captions, paragraphs, and tables.

%------------------------------- NewJGPDocument

/NewDocument {

   /pagenumber 0 def         /numberpages true def
   /nopage true def

   /paragraphahead 45 def    /paragraphspace 24 def
   /paragraphindent 24 def   /paragraphadjust 0 def

   /tabs [ ] def             /currenttab 0 def

   /Helvetica /UHelvetica Umlaute 
   /Helvetica-Bold /UHelvetica-Bold  Umlaute 
   /Helvetica-Oblique /UHelvetica-Oblique  Umlaute

   /textfontlist [
      /UHelvetica findfont 11 scalefont
      /UHelvetica-Bold findfont 11 scalefont 
      /UHelvetica-Oblique findfont 11 scalefont 
      /Symbol findfont 11 scalefont 
      /UHelvetica findfont 8 scalefont 
      dup
      dup
      dup
      ] def
   /graffontlist [
      /UHelvetica findfont 11 scalefont
      null                                 % bold: centered symbols
      /UHelvetica-Oblique findfont 11 scalefont 
      /Symbol findfont 11 scalefont 
      /UHelvetica findfont 8 scalefont 
      dup
      dup
      /UHelvetica-Bold findfont 11 scalefont   % a bold to spare
      ] def

/textfonts {
   /fontlist textfontlist def
   /superscriptlevel 5 def
   /subscriptlevel -3 def
   /linespace 15 def
} bind def

/graffonts {
   /fontlist graffontlist def
   /superscriptlevel 3 def
   /subscriptlevel -2 def
   /linespace 11 def
} bind def

textfonts

1.0 setlinewidth  6 ScaleSymbolFont

/c1 { /TextProcessor { caption1 CaptionMaker } def } def
/C1 { /TextProcessor { caption1 CaptionMaker } def } def
/c2 { /TextProcessor { caption2 CaptionMaker } def } def
/C2 { /TextProcessor { caption2 CaptionMaker } def } def

/p { /TextProcessor /ParagraphChopper load def } def
/P { /TextProcessor /ParagraphChopper load def } def
/n { /TextProcessor /TabStarter load def } def
/N { /TextProcessor /TabStarter load def } def
/t { /TextProcessor /TabAdvancer load def } def
/T { /TextProcessor /TabAdvancer load def } def
/| { /TextProcessor /DefaultTextProcessor load def } def
/ls { { LineSpacer } repeat } def
/LS { { LineSpacer } repeat } def

% Thus precede each paragraph by 'light p' and conclude it by
% 'light |'. Start each new table line by 'light n' and move
% to next tab setting by 'light t' (don't forget to define
% the tabs array before using tabs). 'Light 3 ls' provides an
% extra 3 empty lines of vertical spacing.

} def  % of NewJGPDocument

%----------------------------- NewPage ---------------------------------
% NB: this resets the backbone text area to the full size

/NewPage { gsave
   pagenumber 0 gt { showpage } if

   /leftmargin  72 def   /bottomoftext 72 def
   /topoftext 732 def    /textwidth 468 def

   /pagenumber pagenumber 1 add def
   numberpages {
     textfontlist 0 get setfont
     pagenumber (      ) cvs dup stringwidth pop 2 div
     leftmargin textwidth 2 div add exch sub 38 moveto show
     } if
   /lineordinate topoftext def  /nopage false def
   grestore
} bind def

%------------------------- ParagraphSpacer -----------------------------
% provides optional positive or negative indent on line. A positive
% indent starts the first line after the indent; other lines follow
% on the normal leftmargin. A negative indent places the first line
% on the normal leftmargin, whereas all subsequent lines are indented.

/ParagraphSpacer {
   lineordinate paragraphahead sub 10 sub bottomoftext lt nopage or
      { NewPage }
      { /lineordinate lineordinate paragraphspace sub def }
      ifelse
   paragraphindent 0 ge
      { /lineabscissa leftmargin paragraphindent add def
        /linewidth textwidth paragraphindent sub def
      }
      { /lineabscissa leftmargin def
        /linewidth textwidth def
        /leftmargin leftmargin paragraphindent sub def
        /textwidth textwidth paragraphindent add def
        /| { /leftmargin leftmargin paragraphindent add def
             /textwidth textwidth paragraphindent sub def
             /| { /TextProcessor /DefaultTextProcessor load def } def
             |
           } def
      }
      ifelse
} bind def

%-------------------------- CaptionSpacer ------------------------------

/CaptionSpacer {
   lineordinate captionahead sub 10 sub bottomoftext lt nopage or
      { NewPage } 
      { /lineordinate lineordinate captionspace sub def }
      ifelse
   /lineabscissa leftmargin captionindent add def
   /linewidth textwidth captionindent sub def
} bind def

%---------------------------- LineSpacer -------------------------------

/LineSpacer {
   lineordinate linespace sub 10 sub bottomoftext lt
     { NewPage }
     { /lineordinate lineordinate linespace sub def }
     ifelse
   /lineabscissa leftmargin def
   /linewidth textwidth def
} bind def

%-------------------------- paragraph chopper --------------------------
%  paragraph | --     

/ParagraphChopper {
   ParagraphSpacer
     /thetext exch def
     TextFilter
     /style 0 def
     {
        BreakText not { exit } if
        paragraphadjust LineAdjust
        ShowLine
        LineSpacer
     } loop
     paragraphadjust dup 0 eq { pop 1 } if LineAdjust
     ShowLine
} def

%---------------------------- CaptionMaker -----------------------------

/CaptionMaker {
   CaptionSpacer
      /thetext exch def
      TextFilter
      /style 0 def
      {
         BreakText not { exit } if
         captionadjust LineAdjust
         ShowLine
         LineSpacer
      } loop
      captionadjust LineAdjust
      ShowLine
} def

%--------------------------- Caption formats -------------------------
/caption1 {                   % centered chapter caption
   /captionspace 30 def
   /captionindent 0 def
   /captionahead 120 def
   /captionadjust 3 def
} def

/caption2 {                   % left-adjusted subchapter caption
   /captionspace 30 def
   /captionindent 0 def
   /captionahead 90 def
   /captionadjust 1 def
} def

%---------------------------- TabStarter -----------------------------
% Begins a new table line (vertical advance is one linespace) and
% inserts text of first column

/TabStarter {
     /thetext exch def
     TextFilter
     LineSpacer
     tabs length 0 eq 
        { (! No tabs defined!\n) print flush }
        { tabs 0 get 0 get /linewidth exch def
          /style 0 def
          BreakText
          tabs 0 get 1 get LineAdjust
          ShowLine
          /currenttab 0 def
        }
        ifelse
} def

%---------------------------- TabAdvancer -----------------------------
% Moves to the next table column and inserts text.

/TabAdvancer {
     /thetext exch def
     TextFilter
     tabs length 0 eq 
        { (! No tabs defined!\n) print flush }
        { tabs length currenttab le
           { (! Using more tabs than you have !\n) print flush }
           { /currenttab currenttab 1 add def
             /lineabscissa leftmargin tabs 0 currenttab getinterval 
                { 0 get add } forall def
             tabs currenttab get 0 get /linewidth exch def
             /style 0 def
             BreakText pop
             tabs currenttab get 1 get LineAdjust
             ShowLine
           }
           ifelse
        }
        ifelse
} def



