

const L_MAIN = $L("main");
const L_UNITBUFFER = $L("unit_buffer");


function Random(min, max) {
   return min + dwrand() / (4294967295 / (max - min + 1) + 1);
}


function CreateImageSpriteAtLocation(playerID, location, imageID, drawFunc, iscript) {
    var new_iscript = iscript;
    if (new_iscript == 0) new_iscript = 281;
    const prev_iscript = dwread(0x666778 + 34000 + imageID * 4);
    dwwrite(0x666778 + 34000 + imageID * 4, new_iscript); // change image iscript
    dwwrite(0x666778 + 14000 + imageID * 1, drawFunc); // change image drawfunc
	SetMemoryX(0x00666458, SetTo, imageID, 0x0000ffff); // change scanner image to input image
    CreateUnit(1, 33, location, playerID);
	RemoveUnit(33, playerID);
	SetMemoryX(0x00666458, SetTo, 546, 0x0000ffff); // revert scanner image
    dwwrite(0x666778 + 34000 + imageID * 4, prev_iscript); // revert image iscript
}


function CreateUnitDeathAtLocation(unitType, playerID, location) {
    CreateUnit(1, unitType, L_UNITBUFFER, playerID);
    MoveUnit(1, unitType, playerID, L_UNITBUFFER, location);
    if (Bring(playerID, AtLeast, 1, unitType, L_UNITBUFFER)) RemoveUnitAt(All, unitType, L_UNITBUFFER, playerID);
    KillUnit(unitType, playerID);
}


function GetVision(playerID) {
    if (playerID == 0) RunAIScript("+Vi0");
    else if (playerID == 1) RunAIScript("+Vi1");
    else if (playerID == 2) RunAIScript("+Vi2");
    else if (playerID == 3) RunAIScript("+Vi3");
    else if (playerID == 4) RunAIScript("+Vi4");
    else if (playerID == 5) RunAIScript("+Vi5");
    else if (playerID == 6) RunAIScript("+Vi6");
    else if (playerID == 7) RunAIScript("+Vi7");
}


function LoseVision(playerID) {
    if (playerID == 0) RunAIScript("-Vi0");
    else if (playerID == 1) RunAIScript("-Vi1");
    else if (playerID == 2) RunAIScript("-Vi2");
    else if (playerID == 3) RunAIScript("-Vi3");
    else if (playerID == 4) RunAIScript("-Vi4");
    else if (playerID == 5) RunAIScript("-Vi5");
    else if (playerID == 6) RunAIScript("-Vi6");
    else if (playerID == 7) RunAIScript("-Vi7");
}


function GetDistance(fromX, fromY, toX, toY) {
    const a = fromX - toX;
    const b = fromY - toY;
    const distance = sqrt( a*a + b*b );
    return distance;
}


function GetWholeAndFraction(value) {
    // takes in a value * 10000 and returns the whole numbers + the fraction separately.
    var new_value = value;
    const whole = value / 10000;
    new_value -= (10000 * whole);
    const fraction = new_value;
    return whole, fraction;
}


function GetPercentage(currentValue, maxValue) {
    const new_current = currentValue * 10000;
    const percentage = (new_current / maxValue) * 100;
    return percentage / 10000;
}


function MovePosTowards(positionx, positiony, angle, distance) {
    const directionx, directiony = lengthdir(distance, angle);
    const new_positionx = positionx + directionx;
    const new_positiony = positiony + directiony;
    return new_positionx, new_positiony;
}


function GetLocationPoint(location) {
	const locTable = EPD(0x58DC4C);
	return dwread_epd(locTable + location * 5), dwread_epd(locTable + location * 5 + 1);
}


function PosIsWithinRect(positionx, positiony, left, right, top, bottom) {
    if (positionx >= left && positionx <= right && positiony >= top && positiony <= bottom) return 1;
    return 0;
}


function SCDirectionToDeg(direction) {
    var angle = direction * 14063;
    angle = (angle/10000) - 90; // could make this number readable in the future by keeping it in the range of 0 - 359
    return angle;
}


function GetAngle(originx, originy, destinationx, destinationy) {
    const angle = atan2(destinationy - originy, destinationx - originx);
    return angle;
}


function AddAngles(angle0, angle1) {
    var new_angle = angle0 + angle1;
    if (new_angle > 4000000000) new_angle += 360;
    else if (new_angle >= 360) new_angle -= 360;
    return new_angle;
}


function RotatePosAroundPoint(positionx, positiony, pointx, pointy, rotation) {
    const distance = GetDistance(positionx, positiony, pointx, pointy);
    const new_positionx, new_positiony = MovePosTowards(pointx, pointy, rotation, distance);
    return new_positionx, new_positiony;
}


function PosIsOnMap(positionx, positiony) {
    if (positionx >= 0 && positionx <= 8191 && positiony >= 0 && positiony <= 8191) return 1;
    return 0;
}


function PosToSquare(positionx, positiony, width) {
    const half_width = width/2;
    var limit_left = 0;
    if (positionx > half_width) limit_left = positionx - half_width;
    const limit_right = positionx + half_width;
    var limit_top = 0;
    if (positiony > half_width) limit_top = positiony - half_width;
    const limit_bottom = positiony + half_width;
    return limit_left, limit_right, limit_top, limit_bottom;
}


function DrawCircle(positionx, positiony, diameter, dots, imageID, drawFunc, iscript) {
    var angle_increment = (3600000 / dots) / 10000;
    var angle = 0;
    for (var i = 0; i < dots; i++) {
        const x, y = MovePosTowards(positionx, positiony, angle, diameter / 2);
        setloc(L_MAIN, x, y);
        CreateImageSpriteAtLocation($P8, L_MAIN, imageID, drawFunc, iscript);
        angle += angle_increment;
    }
}


function DrawLine(originx, originy, destinationx, destinationy, dots, imageID, drawFunc, iscript) {
    const d = GetDistance(originx, originy, destinationx, destinationy);
    const a = GetAngle(originx, originy, destinationx, destinationy);
    const increment = ((d * 10000) / dots) / 10000;
    for (var i = 0; i < dots; i++) {
        const x, y = MovePosTowards(originx, originy, a, increment * i);
        setloc(L_MAIN, x, y);
        CreateImageSpriteAtLocation($P8, L_MAIN, imageID, drawFunc, iscript);
    }
}


function ClearTextLines(from_line, to_line) {
    for (var i = from_line; i < to_line + 1; i++) {
        DisplayTextAt(i, "\x0BNull");
    }
}


function SetFlag(flags, id) {
    var new_value = flags;
    new_value |= 1 << id;
    return new_value;
}


function ClearFlag(flags, id) {
    var new_value = flags;
    new_value &= ~(1 << id);
    return new_value;
}


function FlagIsSet(flags, id) {
    if (flags & (1 << id)) return 1;
    return 0;
}


function GetUnitTotal() {
    return dwread(0x6283F0);
}


function GetCountOfUnit(playerID, unitType) {
    return dwread_epd(EPD(0x582324) + 12 * unitType + playerID);
}