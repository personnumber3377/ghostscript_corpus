%!
%%Title: /tmp_mnt/home/phebos2/WINANS/gpib.ps
%%Creator: IslandWrite for winans
%%CreationDate: Tue Nov  2 15:20:27 1993

%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%EndComments
%% 
%% ISLANDWRITE prolog
%% Copyright 1987,1992
%%
%%BeginProlog

userdict /IslandWriteDict 300 dict dup begin put

/cp { closepath } bind def
/fi { fill } bind def
/gr { grestore } bind def
/gs { gsave } bind def
/lnt { lineto } bind def
/mt { moveto } bind def
/np { newpath } bind def
/ro { rotate } bind def
/s { show } bind def
/sc { scale } bind def
/sg { setgray } bind def
/sj { setlinejoin } bind def
/sp { x 0 rmoveto } bind def
/srgb { setrgbcolor } bind def
/ss { currentpoint pop exch moveto } bind def
/st { stroke } bind def
/slw { setlinewidth } bind def
/tr { translate } bind def

/reencode_small_dict 12 dict def

/ReencodeSmall {
    reencode_small_dict begin
    /new_codes_and_names exch def
    /new_font_name exch def
    /base_font_name exch def
    /base_font_dict base_font_name findfont def
    /newfont base_font_dict maxlength dict def

    base_font_dict {
	exch dup /FID ne {
	    dup /Encoding eq {
		exch dup length array copy newfont 3 1 roll put
	    } {
		exch newfont 3 1 roll put
	    } ifelse
	} {
	    pop pop
	} ifelse
    } forall

    base_font_name 256 string cvs /base_font_name_string exch def
    base_font_name_string length 1 add string /extended_font_name exch def
    extended_font_name 0 (_) putinterval
    extended_font_name 1 base_font_name_string putinterval
    new_codes_and_names aload pop
    new_codes_and_names length 2 idiv {
	newfont /Encoding get 3 1 roll put
    } repeat
    new_font_name newfont definefont pop
    end     %reencode_small_dict
} def

/extended_Zapf [
    8#223 /a89 8#224 /a90 8#225 /a93 8#226 /a94 8#227 /a91 8#230 /a92
    8#231 /a205 8#232 /a85 8#233 /a206 8#234 /a86 8#235 /a87 8#236 /a88
    8#237 /a95 8#240 /a96
] def

/extended_Standard [

    29 /thorn 30 /yacute 31 /divide 128 /Acircumflex 129 /Adieresis 130 /Agrave
    131 /Aring 132 /Atilde 133 /Ccedilla 134 /Eacute 135 /Ecircumflex
    136 /Edieresis 137 /Egrave 138 /Iacute 139 /Icircumflex 140 /Idieresis
    141 /Igrave 142 /Ntilde 143 /Oacute 144 /Ocircumflex 145 /Odieresis
    146 /Ograve 147 /Otilde 148 /Scaron 149 /Uacute 150 /Ucircumflex
    151 /Udieresis 152 /Ugrave 153 /Ydieresis 154 /Zcaron 155 /aacute
    156 /acircumflex 157 /adieresis 158 /agrave 159 /aring 160 /atilde

    161 /exclamdown 162 /cent 163 /sterling 164 /fraction 165 /yen 166 /florin
    167 /section 168 /currency 169 /quotesingle 170 /quotedblleft
    171 /guillemotleft 172 /guilsinglleft 173 /guilsinglright 174 /fi 175 /fl
    176 /plusminus 177 /endash 178 /dagger 179 /daggerdbl 180 /periodcentered
    181 /twosuperior 182 /paragraph 183 /bullet 184 /quotesinglbase
    185 /quotedblbase 186 /quotedblright 187 /guillemotright 188 /ellipsis
    189 /perthousand 190 /threesuperior 191 /questiondown 192 /mu 193 /grave

    194 /acute 195 /circumflex 196 /tilde 197 /macron 198 /breve 199 /dotaccent
    200 /dieresis 201 /onesuperior 202 /ring 203 /cedilla 204 /onequarter
    205 /hungarumlaut 206 /ogonek 207 /caron 208 /emdash 209 /ccedilla
    210 /copyright 211 /eacute 212 /ecircumflex 213 /edieresis 214 /egrave
    215 /iacute 216 /icircumflex 217 /idieresis 218 /igrave 219 /logicalnot

    220 /minus 221 /ntilde 222 /oacute 223 /ocircumflex 224 /odieresis 225 /AE
    226 /onehalf 227 /ordfeminine 228 /ograve 229 /otilde 230 /registered

    231 /scaron 232 /Lslash 233 /Oslash 234 /OE 235 /ordmasculine 236 /trademark
    237 /uacute 238 /ucircumflex 239 /udieresis 240 /ugrave 241 /ae
    242 /ydieresis 243 /zcaron 244 /Aacute 245 /dotlessi 246 /threequarters
    247 /Eth 248 /lslash 249 /oslash 250 /oe 251 /germandbls 252 /multiply
    253 /Yacute 254 /Thorn 255 /eth
] def

/extended_Symbol [
] def

/extend_font {  % stack: fontname newfontname
    exch dup (ZapfDingbats) eq {
	cvn exch cvn extended_Zapf ReencodeSmall
    } {
	dup (Symbol) eq {
	    cvn exch cvn extended_Symbol ReencodeSmall
	} {
	    cvn exch cvn extended_Standard ReencodeSmall
	} ifelse
    } ifelse
} bind def

/gf {
    /f exch def f cvn where {
	f exch begin cvn load exec setfont end
    } {
	f 0 f length 8 sub getinterval (LocalFont) extend_font
	/LocalFont findfont
	/xsz f f length 4 sub 4 getinterval cvi def
	/ysz f f length 8 sub 4 getinterval cvi def
	[ xsz 0 0 ysz neg 0 0 ] makefont dup f cvn exch def
	setfont
    } ifelse
} bind def

/ul { % space drop thickness
    gsave currentpoint currentlinewidth 
    currentpoint newpath moveto 6 -3 roll 
    setlinewidth 0 exch rmoveto
    0 rlineto stroke setlinewidth moveto
    grestore 
} bind def

/image_raster { % sw sh sd dw dh xs ys
    translate scale /sd exch def /sh exch def /sw exch def
    /imagebuf sw sd mul 7 add 8 idiv string def
    sw sh sd [sw 0 0 sh 0 0] {
	currentfile imagebuf readhexstring pop
    } image
} bind def

/colimg {
    5 dict
    begin
    dup
    /ncol exch def % # of colors
    exch {
	{ pop } repeat
    } {
	pop pop
    } ifelse
    pop % the matrix
    /depth exch def
    /height exch def
    /width exch def
    /pstring width ncol depth mul mul 7 add 8 idiv string def
    height {
	currentfile pstring readhexstring pop pop
    } bind repeat
    end
} bind def

/image_color_raster { % sw sh sd dw dh xs ys
    systemdict /colorimage known not {
	/colorimage /colimg load def
    } if
    translate scale /sd exch def /sh exch def /sw exch def
    /imagebuf sw 3 mul sd mul 7 add 8 idiv string def
    sw sh sd [sw 0 0 sh 0 0] {
	currentfile imagebuf readhexstring pop
    } false 3 colorimage
} bind def

/nx {
    /x exch def
} bind def

0. nx

%%EndProlog

save /vm_state exch def [1 0 0 -1 0 0] concat 0.050000 0.050000 sc .5 slw
0 -15840 tr 0 ro
np 0 0 mt 0 15840 lnt 12240 15840 lnt 12240 0 lnt cp clip
userdict /#copies 1 put 1484 ss 6300 1484 mt (Times-Roman05600560) gf 2196 ss
6300 2196 mt 2908 ss 6300 2908 mt 3620 ss 5538 3620 mt (EPICS) s 4332 ss
3842 4332 mt (GPIB Device Support) s (Times-Roman03600360) gf 4804 ss
6300 4804 mt 5276 ss 6300 5276 mt 5748 ss 5365 5748 mt (John Winans) s
(Times-Roman02200220) gf 6052 ss 5417 6052 mt (September 24, 1993) s
(Times-Roman03600360) gf 6524 ss 6300 6524 mt 6996 ss 6300 6996 mt 7468 ss
6300 7468 mt 7940 ss 6300 7940 mt 8412 ss 6300 8412 mt 8884 ss 6300 8884 mt
9356 ss 6300 9356 mt 9828 ss 6300 9828 mt 10300 ss 6300 10300 mt 10772 ss
6300 10772 mt 11244 ss 6300 11244 mt 11716 ss 6300 11716 mt 12188 ss
6300 12188 mt 12660 ss 6300 12660 mt 13132 ss 6300 13132 mt 13604 ss
6300 13604 mt 14076 ss 6300 14076 mt 14548 ss 6300 14548 mt
showpage vm_state restore


save /vm_state exch def [1 0 0 -1 0 0] concat 0.050000 0.050000 sc .5 slw
0 -15840 tr 0 ro
np 0 0 mt 0 15840 lnt 12240 15840 lnt 12240 0 lnt cp clip
userdict /#copies 1 put 1340 ss 6300 1340 mt (Times-Roman03600360) gf 1812 ss
4035 1812 mt (Chapter1: GPIB device support) s (Times-Roman02400240) gf 2220 ss
1440 2220 mt 2548 ss 1440 2548 mt (This text describes how to write device support for GPIB devices. It is assumed that the reader is ) s
2836 ss 1442 2836 mt (already familiar with the dialogue required to operate a GPIB instrument, EPICS, how to compile ) s
3124 ss 1442 3124 mt (device support modules, and how to use makesdr to build an environment such that the new device ) s
3412 ss 1442 3412 mt (support modules can be made available to database designers via DCT.) s
(Times-Roman03200320) gf 3836 ss 1440 3836 mt (1.1  Purpose) s
(Times-Roman02400240) gf 4244 ss 1800 4244 mt (A GPIB device support module is used to provide access to the operating parameters of a GPIB ) s
4532 ss 1800 4532 mt (device. ) s -1.280 nx sp (GPIB ) s sp (devices ) s sp (may ) s
-1.300 nx sp (be ) s -1.280 nx sp (accessed ) s sp (via ) s -1.300 nx sp (National ) s
-1.280 nx sp (Instruments ) s sp (1014 ) s sp (cards ) s -1.300 nx sp (or ) s
-1.280 nx sp (via ) s sp (Bitbus ) s -1.300 nx sp (Univer-) s 4820 ss 1800 4820 mt (sal Gateways.) s
(Times-Roman03200320) gf 5284 ss 1440 5284 mt (1.2  Overview) s
(Times-Roman02400240) gf 5692 ss 1800 5692 mt (GPIB devices typically have many parameters, each of which may be thought of in terms of the ) s
5980 ss 1800 5980 mt (standard types of database records available in EPICS. It is the job of the device support module ) s
6268 ss 1800 6268 mt (designer to decide how the mapping of these parameters will be made to the  available record ) s
6556 ss 1800 6556 mt (types. Once this mapping is complete, the device support module may be written.) s
6924 ss 1800 6924 mt (The writing of the device support module consists primarily of the construction of a parameter ) s
7212 ss 1800 7212 mt (table. ) s -5.240 nx sp (This ) s -5.260 nx sp (table ) s
-5.240 nx sp (is ) s -5.260 nx sp (used ) s -5.240 nx sp (to ) s -5.260 nx sp (associate ) s
-5.240 nx sp (the ) s -5.260 nx sp (database ) s -5.240 nx sp (record ) s -5.260 nx sp
(types ) s -5.240 nx sp (with ) s -5.260 nx sp (the ) s -5.240 nx sp (operating ) s
-5.260 nx sp (parameters ) s -5.240 nx sp (of ) s -5.260 nx sp (the ) s -5.240 nx sp
7500 ss 1800 7500 mt (GPIB instrument.) s 7868 ss 1800 7868 mt (Other aspects of module design include the handling of SRQ events and errors. SRQ events are ) s
8156 ss 1800 8156 mt (made available to the device support module if so desired. The processing of an SRQ event is ) s
8444 ss 1800 8444 mt (completely up to the designer of the module. They may be ignored, tied to event based record ) s
8732 ss 1800 8732 mt (processing, or anything else the designer wishes. Error conditions may be handled in a similar ) s
9020 ss 1800 9020 mt (fashion.) s (Times-Roman03200320) gf 9484 ss 1440 9484 mt
(1.3  Using a GPIB Device Support Module) s (Times-Roman02400240) gf 9892 ss
1800 9892 mt (To make use of a GPIB device support module, You must add the appropriate entries to your ) s
10180 ss 1800 10180 mt (application ) s -7.800 nx sp (tree's ) s -7.820 nx sp (devSup.ascii ) s
-7.800 nx sp (file. ) s -7.820 nx sp (To ) s sp (add ) s -7.800 nx sp (entries ) s
-7.820 nx sp (for ) s sp (GPIB ) s -7.800 nx sp (devices, ) s -7.820 nx sp (you ) s
-7.800 nx sp (edit ) s -7.820 nx sp (the ) s sp (file ) s -7.800 nx sp (and ) s
-7.820 nx sp (add ) s sp (your ) s -7.800 nx sp 10468 ss 1800 10468 mt (entries to the bottom. They will look like this:) s
(Times-Bold02000200) gf 10788 ss 1800 10788 mt 360.000 nx sp 1440.000 nx sp ("ai" GPIB_IO "devAiModName" "module name/description \(GPIB\)") s
11108 ss 1800 11108 mt 360.000 nx sp 1440.000 nx sp ("ai" BBGPIB_IO "devAiModName" "module name/description \(BBGPIB\)") s
(Times-Roman02400240) gf 11476 ss 1800 11476 mt (The first field ) s
(Times-Bold02000200) gf ("ai" ) s (Times-Roman02400240) gf (specifies that the entry describes an analog input record.) s
11844 ss 1800 11844 mt (The ) s (Times-Bold02000200) gf (GPIB_IO) s
(Times-Roman02400240) gf ( or ) s (Times-Bold02000200) gf (BBGPIB_IO) s
(Times-Roman02400240) gf ( field is used to specify the type of interface the device is attached to. ) s
12132 ss 1800 12132 mt (The ) s (Times-Bold02000200) gf (GPIB_IO) s
(Times-Roman02400240) gf ( interface is the National Instruments 1014 board and the ) s
(Times-Bold02000200) gf (BBGPIB_IO) s (Times-Roman02400240) gf ( is the bitbus ) s
12420 ss 1800 12420 mt (universal gateway \(BUG.\) This field becomes the record's link type field.) s
(Times-Bold02000200) gf 12788 ss 1800 12788 mt ("devAiModName") s
(Times-Roman02400240) gf ( ) s -3.340 nx sp (represents ) s -3.360 nx sp (the ) s sp (DSET ) s
sp (name ) s sp (used ) s sp (to ) s sp (identify ) s -3.340 nx sp (the ) s -3.360 nx sp (entry ) s
sp (point\(s\) ) s sp (to ) s sp (the ) s sp (GPIB ) s sp (device ) s -3.340 nx sp 13076 ss
1800 13076 mt (support ) s -1.120 nx sp (module. ) s sp (This ) s sp (must ) s
-1.140 nx sp (be ) s -1.120 nx sp (the ) s sp (exact ) s sp (same ) s -1.140 nx sp (name ) s
-1.120 nx sp (specified ) s sp (in ) s sp (the ) s -1.140 nx sp (device ) s -1.120 nx sp
(support ) s sp (module ) s sp (for ) s -1.140 nx sp (the ) s -1.120 nx sp 13364 ss
1800 13364 mt (same record type, in this case, an analog input record.) s
13732 ss 1800 13732 mt (The last field is the text field that will appear in the DCT choice menu that pops up when the user ) s
14020 ss 1800 14020 mt (edits the DTYP field of a record.) s 14388 ss
1800 14388 mt (Notice ) s -2.160 nx sp (that ) s -2.180 nx sp (the ) s sp (same ) s sp (DSET ) s
sp (name ) s -2.160 nx sp (appears ) s -2.180 nx sp (for ) s sp (both ) s sp (the ) s sp (BUG ) s
sp (and ) s -2.160 nx sp (NI ) s -2.180 nx sp (interfaces. ) s sp (This ) s sp (is ) s sp (because ) s
sp (the ) s -2.160 nx sp 14676 ss 1800 14676 mt (GPIB library code uses the record's link type to differentiate between the two. Also note that ) s
showpage vm_state restore


save /vm_state exch def [1 0 0 -1 0 0] concat 0.050000 0.050000 sc .5 slw
0 -15840 tr 0 ro
np 0 0 mt 0 15840 lnt 12240 15840 lnt 12240 0 lnt cp clip
userdict /#copies 1 put 1253 ss 1800 1253 mt (Times-Roman02400240) gf (unless explicitly stated otherwise, only GPIB device support modules that are designed using the ) s
1541 ss 1800 1541 mt (GPIB device support library can actually support both the NI and BUG interfaces!) s
1909 ss 1800 1909 mt (When the modifications are complete to the devSup.ascii file and the proper ) s
(Times-Bold02000200) gf (makesdr) s (Times-Roman02400240) gf ( incantation ) s
2197 ss 1800 2197 mt (has been made, DCT will provide access to the new devices by allowing them to appear in the ) s
2485 ss 1800 2485 mt (choice ) s -5.760 nx sp (menu ) s sp (for ) s sp (the ) s sp (DTYP ) s
-5.780 nx sp (fields ) s -5.760 nx sp (for ) s sp (the ) s sp (record ) s -5.780 nx sp (types ) s
-5.760 nx sp (specified ) s sp (in ) s sp (the ) s -5.780 nx sp (devSup.ascii ) s
-5.760 nx sp (file. ) s sp (It ) s sp (will ) s -5.780 nx sp (also ) s -5.760 nx sp
2773 ss 1800 2773 mt (present a menu box for the output \(or input\) specification field to query the user for the proper ) s
3061 ss 1800 3061 mt (GPIB \(or BitBus\) link number, which parameter table entry to use when performing I/O, the ) s
3349 ss 1800 3349 mt (device address \(the actual GPIB address\), and in the case of bitbus, the BUG's node number. ) s
3717 ss 1800 3717 mt (For more information on the various ascii and header files, ) s
(Times-Bold02000200) gf (makesdr) s (Times-Roman02400240) gf (, and how DCT uses them see ) s
4005 ss 1800 4005 mt (the document "The Application Developers Guide".) s
(Times-Roman03200320) gf 4469 ss 1440 4469 mt (1.4  The GPIB Device Support Module) s
(Times-Roman02400240) gf 4877 ss 1800 4877 mt (The basic GPIB device support module is constructed by copying the sample skeleton template ) s
5165 ss 1800 5165 mt (and ) s -6.460 nx sp (adding ) s sp (the ) s -6.480 nx sp (parameters ) s
-6.460 nx sp (to ) s sp (the ) s -6.480 nx sp (parameter ) s -6.460 nx sp (table. ) s sp
(The ) s -6.480 nx sp (template ) s -6.460 nx sp (consists ) s sp (of ) s -6.480 nx sp (DSET ) s
-6.460 nx sp (entries, ) s sp (a ) s -6.480 nx sp (param-) s 5453 ss 1800 5453 mt (eter table, efast tables \(optional\), name tables \(optional\), a parm block, a debugging flag, a SRQ ) s
5741 ss 1800 5741 mt (handler function \(optional\), and some custom conversion functions \(optional.\)) s
6109 ss 1800 6109 mt (The fast and easy way to create a new GPIB device support module is to copy the template and ) s
6397 ss 1800 6397 mt (change ) s -6.460 nx sp (the ) s -6.480 nx sp (DSET ) s
-6.460 nx sp (entry ) s -6.480 nx sp (names ) s -6.460 nx sp (to ) s -6.480 nx sp (a ) s
-6.460 nx sp (new ) s -6.480 nx sp (unique ) s -6.460 nx sp (value, ) s -6.480 nx sp (change ) s
-6.460 nx sp (the ) s -6.480 nx sp (debug ) s -6.460 nx sp (flag ) s -6.480 nx sp (name, ) s
-6.460 nx sp (and ) s -6.480 nx sp (replace ) s sp (the ) s -6.460 nx sp 6685 ss
1800 6685 mt (parameter table entries. Then compile it and you are finished. This assumes that you do not wish ) s
6973 ss 1800 6973 mt (to support SRQ processing and do not use the enumerated commands. In those cases, you might ) s
7261 ss 1800 7261 mt (have to perform some additional work described in the sections below.) s
(Times-Roman02800280) gf 7677 ss 1440 7677 mt (1.4.1  Required DSET Table Entries) s
(Times-Roman02400240) gf 8005 ss 1800 8005 mt (DSET ) s -5.660 nx sp (tables ) s sp
(\(Device ) s -5.680 nx sp (Support ) s -5.660 nx sp (Entry ) s sp (Tables\) ) s
-5.680 nx sp (are ) s -5.660 nx sp (what ) s sp (EPICS ) s -5.680 nx sp (uses ) s
-5.660 nx sp (to ) s sp (interact ) s -5.680 nx sp (with ) s -5.660 nx sp (a ) s sp (device ) s
-5.680 nx sp (support ) s -5.660 nx sp 8293 ss 1800 8293 mt (modules. There must be one for each ) s
(Times-Italic02400240) gf (type) s (Times-Roman02400240) gf ( of record supported by a device support module. The ) s
8581 ss 1800 8581 mt (format of a DSET table used in a GPIB device support module is defined the ) s
(Times-Italic02400240) gf (Epics Application ) s 8869 ss 1800 8869 mt (Developers Guide) s
(Times-Roman02400240) gf ( except that it is followed by three extra pointers.  These pointers are only used ) s
9157 ss 1800 9157 mt (by ) s -2.160 nx sp (the ) s sp (GPIB ) s -2.180 nx sp (system. ) s
-2.160 nx sp (The ) s sp (first ) s -2.180 nx sp (extra ) s -2.160 nx sp (pointer ) s sp
(points ) s -2.180 nx sp (to ) s -2.160 nx sp (the ) s sp (parm ) s -2.180 nx sp (block ) s
-2.160 nx sp (for ) s sp (the ) s -2.180 nx sp (module, ) s -2.160 nx sp (the ) s sp (second ) s
-2.180 nx sp (to ) s -2.160 nx sp 9445 ss 1800 9445 mt (the work function associated with the record type the DSET was created for, and the third for the ) s
9733 ss 1800 9733 mt (SRQ handling function.) s 10101 ss 1800 10101 mt (A typical DSET table used in a GPIB device support module looks like this:) s
(Times-Bold02000200) gf 10421 ss 1800 10421 mt (gDset devAiDevicenameGpib {) s
10741 ss 1800 10741 mt (6,) s 210.000 nx sp 1440.000 nx sp sp (/* number of EPICS elements in the DSET table */) s
11061 ss 1800 11061 mt ({report,) s 1127.000 nx sp 1440.000 nx sp (/* pointer to report function */) s
11381 ss 1800 11381 mt (init_dev_sup,) s 661.000 nx sp 1440.000 nx sp (/* pointer to general init function */) s
11701 ss 1800 11701 mt (devGpibLib_initAi,) s 128.000 nx sp 1440.000 nx sp (/* pointer to record-specific init function */) s
12021 ss 1800 12021 mt (NULL,) s 12341 ss 1800 12341 mt (devGpibLib_readAi,) s
28.000 nx sp 1440.000 nx sp (/* pointer to record-specific I/O function */) s
12661 ss 1800 12661 mt (NULL,) s 12981 ss 1800 12981 mt (\(DRVSUPFUN\) &devSupParms,) s
430.000 nx sp (/* pointer to GPIB parm block */) s 13301 ss 1800 13301 mt (\(DRVSUPFUN\) &devGpibLib_aiGpibWork,) s
836.000 nx sp (/* pointer to GPIB work function */) s 13621 ss 1800 13621 mt (\(DRVSUPFUN\) &devGpibLib_aiGpibSrq}};) s
850.000 nx sp (/* pointer to GPIB SRQ handler */) s (Times-Roman02400240) gf
13989 ss 1800 13989 mt (In general, the above example may be used for any and all analog input GPIB DSET structures. ) s
14277 ss 1800 14277 mt (And the DSET tables provided in the generic GPIB device support module template should work ) s
14565 ss 1800 14565 mt (unmodified ) s -11.860 nx sp (in ) s sp (most ) s
-11.880 nx sp (cases. ) s -11.860 nx sp (The ) s sp (data ) s -11.880 nx sp (type ) s
-11.860 nx sp (gDset ) s sp (is ) s -11.880 nx sp (defined ) s -11.860 nx sp (in ) s sp (the ) s
-11.880 nx sp (devCommonGpib.h ) s -11.860 nx sp (header ) s sp (file ) s
-11.880 nx sp (and ) s -11.860 nx sp showpage vm_state restore


save /vm_state exch def [1 0 0 -1 0 0] concat 0.050000 0.050000 sc .5 slw
0 -15840 tr 0 ro
np 0 0 mt 0 15840 lnt 12240 15840 lnt 12240 0 lnt cp clip
userdict /#copies 1 put 1253 ss 1800 1253 mt (Times-Roman02400240) gf (should be used by GPIB device support modules when defining DSET tables. ) s
1621 ss 1800 1621 mt (There will be one DSET module for each type of record supported by a GPIB device support ) s
1909 ss 1800 1909 mt (module. Only one of them should include the pointers to the general init function and the report ) s
2197 ss 1800 2197 mt (function. ) s -4.060 nx sp (Other ) s sp (DSET ) s sp (entries ) s
sp (should ) s sp (use ) s sp (NULL ) s sp (for ) s -4.080 nx sp (those ) s -4.060 nx sp (fields. ) s
sp (The ) s sp (reason ) s sp (for ) s sp (this ) s sp (is ) s sp (because ) s -4.080 nx sp (the ) s
-4.060 nx sp 2485 ss 1800 2485 mt (init routine is called in each DSET and in the case of a multi-DSET module, it will be called ) s
2773 ss 1800 2773 mt (unnecessarily. ) s -8.180 nx sp (The ) s sp (report ) s
-8.200 nx sp (routine ) s -8.180 nx sp (works ) s sp (the ) s -8.200 nx sp (same ) s
-8.180 nx sp (way. ) s -8.200 nx sp (It ) s -8.180 nx sp (is ) s sp (currently ) s
-8.200 nx sp (called ) s -8.180 nx sp (only ) s sp (when ) s -8.200 nx sp (a ) s
-8.180 nx sp (user ) s -8.200 nx sp (types ) s -8.180 nx sp 3061 ss 1800 3061 mt (the dbior command on an IOC console. And if more than one DSET points to the same report ) s
3349 ss 1800 3349 mt (routine, you will see multiple copies of your report... Nothing fatal, just irritating.) s
3717 ss 1800 3717 mt (All DSETs in the same support module will have the same pointer to the same parm block ) s
4005 ss 1800 4005 mt (specified. This is required by the GPIB device support library.) s
4373 ss 1800 4373 mt (Each ) s -7.740 nx sp (DSET ) s -7.760 nx sp (will ) s
-7.740 nx sp (have ) s -7.760 nx sp (a ) s -7.740 nx sp (different ) s -7.760 nx sp (pointer ) s
-7.740 nx sp (for ) s -7.760 nx sp (the ) s -7.740 nx sp (work ) s -7.760 nx sp (function ) s
-7.740 nx sp (and ) s -7.760 nx sp (SRQ ) s -7.740 nx sp (handler. ) s -7.760 nx sp (There ) s
-7.740 nx sp (are ) s -7.760 nx sp (record-) s 4661 ss 1800 4661 mt (type specific work functions and SRQ handlers available in the GPIB device support library that ) s
4949 ss 1800 4949 mt (may be used for these if they are applicable.) s 5317 ss
1800 5317 mt (Please see the document "The Epics Application Developers Guide" for more information about ) s
5605 ss 1800 5605 mt (DSET tables. ) s (Times-Roman02800280) gf 6021 ss
1440 6021 mt (1.4.2  The Parameter Table) s (Times-Roman02400240) gf 6349 ss
1800 6349 mt (This is where the translation to and from the language of the GPIB device is defined. The actual ) s
6637 ss 1800 6637 mt (table ) s -3.120 nx sp (contains ) s sp (one ) s sp (element ) s
-3.140 nx sp (for ) s -3.120 nx sp (each ) s sp (parameter ) s sp (that ) s -3.140 nx sp
(is ) s -3.120 nx sp (made ) s sp (available ) s sp (to ) s -3.140 nx sp (the ) s
-3.120 nx sp (user ) s sp (via ) s sp (DCT ) s -3.140 nx sp (\(referred ) s -3.120 nx sp
6925 ss 1800 6925 mt (to by DCT as "parm" when editing the input \(or output\) specification field of a record.\)) s
7293 ss 1800 7293 mt (The format of the parameter table is as follows:) s
(Times-Bold02000200) gf 7613 ss 1800 7613 mt (static struct gpibCmd gpibCmds[] =) s
7933 ss 1800 7933 mt ({) s 8253 ss 1800 8253 mt 360.000 nx sp (/* Parameter 0 */) s
8573 ss 1800 8573 mt sp ({<f1>, <f2>, <f3>, <f4>,<f5>, <f6>, <f7>, <f8>, <f9>, <f10>, <f11>, <f12>, <f13>},) s
8893 ss 1800 8893 mt 9213 ss 1800 9213 mt sp (/* parameter 1 */) s 9533 ss
1800 9533 mt sp ({&DSET_BO, GPIBCMD, IB_Q_HIGH, "init", NULL, 0, 0, NULL, 0, 0, NULL, NULL, -1}) s
9853 ss 1800 9853 mt (};) s (Times-Roman02400240) gf 10221 ss 1800 10221 mt (This ) s
-0.220 nx sp (example ) s -0.240 nx sp (parameter ) s -0.220 nx sp (table ) s
-0.240 nx sp (contains ) s -0.220 nx sp (2 ) s -0.240 nx sp (parameters. ) s
-0.220 nx sp (They ) s -0.240 nx sp (are ) s -0.220 nx sp (numbered ) s -0.240 nx sp (zero ) s
-0.220 nx sp (and ) s -0.240 nx sp (one. ) s sp (Parameter ) s -0.220 nx sp 10509 ss
1800 10509 mt (zero ) s -10.000 nx sp (is ) s sp (provided ) s sp (for ) s sp (reference. ) s
sp (Parameter ) s sp (one ) s sp (is ) s sp (an ) s sp (actual ) s sp (parameter ) s sp (line ) s
sp (that ) s sp (is ) s sp (used ) s sp (in ) s sp (the ) s sp (DC5009 ) s sp 10797 ss
1800 10797 mt (frequency counter's table. A formal description of the fields is as follows:) s
(Times-Bold02000200) gf 11117 ss 1800 11117 mt (<f1>) s (Times-Roman02400240) gf
11485 ss 1800 11485 mt (Specifies the address of the DSET that describes the record type supported by the table entry. In ) s
11773 ss 1800 11773 mt (English... what record type this parameter is to be used for. It is specified this way so that there is ) s
12061 ss 1800 12061 mt (no actual enumeration of the supported record types. This is used to check a record during the ) s
12349 ss 1800 12349 mt (database initialization phase of operation. The GPIB library compares this pointer's value to that ) s
12637 ss 1800 12637 mt (of the record's DSET field to assure that the user specified parameter is valid for the record type ) s
12925 ss 1800 12925 mt (being initialized.) s 13293 ss 1800 13293 mt (This field must be assigned the address of a DSET.) s
(Times-Bold02000200) gf 13613 ss 1800 13613 mt (<f2>) s (Times-Roman02400240) gf
13981 ss 1800 13981 mt (Specifies the type of GPIB I/O operation that is to be performed. The value of the <f2> field is ) s
14269 ss 1800 14269 mt (verified to be valid for the record type specified by <f1> when the record is initialized that ) s
14557 ss 1800 14557 mt (specifies the parameter. That is to say that only the parameter table entries that are used by a ) s
showpage vm_state restore


save /vm_state exch def [1 0 0 -1 0 0] concat 0.050000 0.050000 sc .5 slw
0 -15840 tr 0 ro
np 0 0 mt 0 15840 lnt 12240 15840 lnt 12240 0 lnt cp clip
userdict /#copies 1 put 1253 ss 1800 1253 mt (Times-Roman02400240) gf (database are checked. This protects the database designer from an error in the parameter table.) s
1621 ss 1800 1621 mt (The <f2> field must be set to one of the following enumerated values declared in ) s
1909 ss 1800 1909 mt (devCommonGpib.h:) s (Times-Bold02000200) gf 2229 ss
1800 2229 mt (GPIBREAD) s (Times-Roman02400240) gf 2597 ss 1800 2597 mt (1\)) s
161.000 nx sp (Send the command string specified in <f4> to the instrument exactly as specified.) s
2965 ss 1800 2965 mt (2\)) s sp (Data is read from the instrument and placed into the ) s
(Times-Bold02400240) gf (dpvt.msg) s (Times-Roman02400240) gf ( field.) s 3333 ss
1800 3333 mt (3\)) s sp (If <f8> is NULL, the data from the read operation is scanned via sscanf\(\) as follows:) s
(Times-Bold02000200) gf 3653 ss 1800 3653 mt 360.000 nx sp 1440.000 nx sp (sscanf\(dpvt.msg, <f5>, &\(precord->val\)\);) s
(Times-Roman02400240) gf 4021 ss 1800 4021 mt 360.000 nx sp (Otherwise, a call is made to the function pointed to by <f8> as follows:) s
(Times-Bold02000200) gf 4341 ss 1800 4341 mt sp 1440.000 nx sp (\(*\(<f8>\)\)\(&dpvt, <f9>, <f10>, <f11>\);) s
(Times-Roman02400240) gf 4709 ss 1800 4709 mt (This has the effect of reading data from the instrument and parsing the desired information out of ) s
4997 ss 1800 4997 mt (it. In the case where <f8> is NULL, the value is determined by the sscanf function. These are ) s
5285 ss 1800 5285 mt (generally ) s -6.520 nx sp (useful, ) s sp (but ) s sp (tricky. ) s
-6.540 nx sp (Keep ) s -6.520 nx sp (in ) s sp (mind ) s -6.540 nx sp (the ) s
-6.520 nx sp (data ) s sp (type ) s -6.540 nx sp (of ) s -6.520 nx sp (the ) s sp (VAL ) s
-6.540 nx sp (field ) s -6.520 nx sp (for ) s sp (the ) s -6.540 nx sp (type ) s
-6.520 nx sp (of ) s sp (record ) s -6.540 nx sp (you ) s -6.520 nx sp 5573 ss
1800 5573 mt (are trying to update. For example the Analog Input record type has a double precision floating ) s
5861 ss 1800 5861 mt (point data type. So a %lf \(percent ell eff\) is required, not a %f. For the case when <f8> is ) s
6149 ss 1800 6149 mt (non-NULL, see the discussion of <f8> below.) s 6517 ss
1800 6517 mt (The ) s (Times-Bold02000200) gf (GPIBREAD) s (Times-Roman02400240) gf
( setting is only valid for input record types.) s (Times-Bold02000200) gf
6837 ss 1800 6837 mt (GPIBWRITE) s (Times-Roman02400240) gf 7205 ss 1800 7205 mt
(1\)) s 161.000 nx sp (If <f8> is NULL, a command string is built via sprintf\(\) as follows:) s
(Times-Bold02000200) gf 7525 ss 1800 7525 mt 360.000 nx sp 1440.000 nx sp (sprintf\(dpvt.msg, <f5>, precord->val\);) s
(Times-Roman02400240) gf 7893 ss 1800 7893 mt 360.000 nx sp (Otherwise, a call is made to to the function pointed to by <f8> as follows:) s
(Times-Bold02000200) gf 8213 ss 1800 8213 mt sp 1440.000 nx sp (\(*\(<f8>\)\)\(&dpvt, <f9>, <f10>, <f11>\);) s
(Times-Roman02400240) gf 8581 ss 1800 8581 mt (This ) s -2.680 nx sp (allows ) s sp
(the ) s sp (module ) s sp (to ) s -2.700 nx sp (create ) s -2.680 nx sp (a ) s sp (character ) s
sp (string ) s sp (that ) s -2.700 nx sp (includes ) s -2.680 nx sp (the ) s sp (val ) s sp
(field ) s sp (of ) s -2.700 nx sp (a ) s -2.680 nx sp (record. ) s sp (As ) s sp (in ) s
-2.700 nx sp (the ) s -2.680 nx sp 8869 ss 1800 8869 mt (case of the ) s
(Times-Bold02000200) gf (GPIBREAD) s (Times-Roman02400240) gf ( operation, keep the specific data type of the VAL field in mind. An oddity ) s
9157 ss 1800 9157 mt (of ) s -4.860 nx sp (the ) s -4.880 nx sp (sprintf\(\) ) s sp (function ) s
sp (that ) s -4.860 nx sp (comes ) s -4.880 nx sp (with ) s sp (vxWorks ) s sp (is ) s
-4.860 nx sp (that ) s -4.880 nx sp (the ) s sp (%lf ) s sp (\(percent ) s -4.860 nx sp (ell ) s
-4.880 nx sp (eff\) ) s sp (format ) s sp (command ) s -4.860 nx sp 9445 ss
1800 9445 mt (will generate nothing when the VAL field is zero. So you should use a length specifier of at least ) s
9733 ss 1800 9733 mt (one when using floating point formatting. For example %.1f \(percent dot one eff\).) s
10101 ss 1800 10101 mt (2\)) s 161.000 nx sp (dpvt.msg is sent to the instrument.) s
10469 ss 1800 10469 mt (3\)) s sp (If the responds-to-writes flag in not -1 in the parm block, data is read from the instrument and ) s
10757 ss 1800 10757 mt (placed in the ) s (Times-Bold02000200) gf (dpvt.rsp) s
(Times-Roman02400240) gf ( string. If the secondary conversion routine pointer is not NULL in the parm ) s
11045 ss 1800 11045 mt (block, it is invoked as follows:) s 11413 ss
1800 11413 mt 360.000 nx sp 1440.000 nx sp (Times-Bold02000200) gf (\(*\(parmblock.wrConversion\)\)\(read_status, pdpvt\);) s
(Times-Roman02400240) gf 11781 ss 1800 11781 mt (For more information on the secondary conversion routine, see "Machines That Respond to ) s
12069 ss 1800 12069 mt (Everything.") s (Times-Bold02000200) gf
(Times-Roman02400240) gf 12437 ss 1800 12437 mt (For more information on the case when <f8> is non-NULL, see the discussion of <f8> below.) s
(Times-Bold02000200) gf 12757 ss 1800 12757 mt (GPIBCMD) s
(Times-Roman02400240) gf 13125 ss 1800 13125 mt (1\)) s 161.000 nx sp (Send the command string specified in <f4> to the instrument exactly as specified.) s
13493 ss 1800 13493 mt (2\)) s sp (If the responds-to-writes flag is not -1 in the parm block, data is read from the instrument and ) s
13781 ss 1800 13781 mt (placed in the ) s (Times-Bold02000200) gf (dpvt.rsp) s
(Times-Roman02400240) gf ( string. And if the secondary conversion routine pointer is not NULL in the ) s
14069 ss 1800 14069 mt (parm block, it is invoked as follows:) s 14437 ss
1800 14437 mt 360.000 nx sp 1440.000 nx sp (Times-Bold02000200) gf (\(*\(parmblock.wrConversion\)\)\(read_status, pdpvt\);) s
(Times-Roman02400240) gf showpage vm_state restore


save /vm_state exch def [1 0 0 -1 0 0] concat 0.050000 0.050000 sc .5 slw
0 -15840 tr 0 ro
np 0 0 mt 0 15840 lnt 12240 15840 lnt 12240 0 lnt cp clip
userdict /#copies 1 put 1253 ss 1800 1253 mt (Times-Roman02400240) gf (For more information on the secondary conversion routine, see the section "Machines That ) s
1541 ss 1800 1541 mt (Respond to Everything.") s (Times-Bold02000200) gf 1861 ss
1800 1861 mt (GPIBCTL) s (Times-Roman02400240) gf 2229 ss 1800 2229 mt (1\)) s
161.000 nx sp (Assert the GPIB ATN line and send the command string specified in <f4> to the instrument ) s
2517 ss 1800 2517 mt (exactly as specified. Then de-assert the ATN line.) s
(Times-Bold02000200) gf 2837 ss 1800 2837 mt (GPIBSOFT) s
(Times-Roman02400240) gf 3205 ss 1800 3205 mt (Does no I/O operations and simply calls the custom conversion routine directly. The return value ) s
3493 ss 1800 3493 mt (from the conversion routine is passed back to the caller of the device support processing entry ) s
3781 ss 1800 3781 mt (point. The custom conversion routine is called as follows:) s
4149 ss 1800 4149 mt 360.000 nx sp 1440.000 nx sp (Times-Bold02000200) gf (\(*<f8>\)\(&dpvt, <f9>, <f10>, <f11>\);) s
(Times-Roman02400240) gf 4517 ss 1800 4517 mt (When GPIBSOFT is specified, <f8> must be set to point to the processing function.) s
(Times-Bold02000200) gf 4837 ss 1800 4837 mt (GPIBREADW) s
(Times-Roman02400240) gf 5205 ss 1800 5205 mt (In order to use this, there must be an ) s
(Times-Bold02000200) gf (srqHandler) s (Times-Roman02400240) gf ( defined in the parm block. ) s
5573 ss 1800 5573 mt (1\)) s 161.000 nx sp (Send the command string specified in <f4> to the instrument exactly as specified.) s
5941 ss 1800 5941 mt (2\)) s sp (Set ) s (Times-Bold02000200) gf (hwpvt.srqCallback) s
(Times-Roman02400240) gf ( to the record-type specific SRQ handling function.) s
6309 ss 1800 6309 mt (3\)) s sp (Wait for an SRQ interrupt from the device. \(Will be caught by ) s
(Times-Bold02000200) gf (parmBlock.srqHandler) s (Times-Roman02400240) gf (\)) s
6677 ss 1800 6677 mt (4\)) s sp (The ) s (Times-Bold02000200) gf (srqHandler) s
(Times-Roman02400240) gf ( should call ) s (Times-Bold02000200) gf (hwpvt.srqCallback ) s
(Times-Roman02400240) gf (to deal with it when it arrives.) s 7045 ss
1800 7045 mt (5\)) s sp (Data is read from the instrument and placed in ) s
(Times-Bold02000200) gf (dpvt.msg) s (Times-Roman02400240) gf (.) s 7413 ss
1800 7413 mt (6\)) s sp (If <f8> is NULL, the data from the read operation is scanned via sscanf\(\) as follows:) s
(Times-Bold02000200) gf 7733 ss 1800 7733 mt 360.000 nx sp 1440.000 nx sp (sscanf\(dpvt.msg, <f5>, &\(precord->val\)\);) s
(Times-Roman02400240) gf 8101 ss 1800 8101 mt 360.000 nx sp (Otherwise, a call is made to the function pointed to by <f8> as follows:) s
(Times-Bold02000200) gf 8421 ss 1800 8421 mt sp 1440.000 nx sp (\(*\(<f8>\)\)\(&dpvt, <f9>, <f10>, <f11>\);) s
(Times-Roman02400240) gf 8789 ss 1800 8789 mt (This has the effect of reading data from the instrument and parsing the desired information out of ) s
9077 ss 1800 9077 mt (it. In the case where <f8> is NULL, the value is determined by the sscanf function. These are ) s
9365 ss 1800 9365 mt (generally ) s -1.320 nx sp (useful, ) s -1.340 nx sp (but ) s sp
(tricky. ) s -1.320 nx sp (Keep ) s -1.340 nx sp (in ) s sp (mind ) s -1.320 nx sp (the ) s
-1.340 nx sp (data ) s sp (types ) s -1.320 nx sp (of ) s -1.340 nx sp (the ) s sp (value ) s
-1.320 nx sp (fields ) s -1.340 nx sp (of ) s sp (the ) s -1.320 nx sp (types ) s
-1.340 nx sp (of ) s sp (records ) s -1.320 nx sp 9653 ss 1800 9653 mt (you ) s
-6.120 nx sp (are ) s sp (trying ) s sp (to ) s -6.140 nx sp (update. ) s -6.120 nx sp (For ) s
sp (example ) s sp (the ) s -6.140 nx sp (Analog ) s -6.120 nx sp (Input ) s sp (record ) s
sp (type ) s -6.140 nx sp (has ) s -6.120 nx sp (a ) s sp (double ) s sp (precision ) s
-6.140 nx sp (floating ) s -6.120 nx sp 9941 ss 1800 9941 mt (point data type. So a %lf \(percent ell eff\) is required, not a %f. For the case when <f8> is ) s
10229 ss 1800 10229 mt (non-NULL, see the discussion of <f8> below.) s
(Times-Bold02000200) gf 10549 ss 1800 10549 mt (GPIBEFASTO) s
(Times-Roman02400240) gf 10917 ss 1800 10917 mt (This operation type is only valid on BO and MBBO record types.) s
11285 ss 1800 11285 mt (1\)) s 161.000 nx sp (The string pointed to by <f11>[VAL] is sent to the instrument.) s
11653 ss 1800 11653 mt (2\)) s sp (If the responds to writes flag is not -1 in the parm block, data is read from the instrument and ) s
11941 ss 1800 11941 mt (placed ) s -6.740 nx sp (in ) s -6.760 nx sp (the ) s
-6.740 nx sp (Times-Bold02000200) gf (dpvt.rsp) s (Times-Roman02400240) gf ( ) s
-6.760 nx sp (buffer. ) s -6.740 nx sp (If ) s -6.760 nx sp (the ) s -6.740 nx sp (secondary ) s
-6.760 nx sp (conversion ) s -6.740 nx sp (function ) s -6.760 nx sp (pointer ) s
-6.740 nx sp (is ) s -6.760 nx sp (not ) s -6.740 nx sp (NULL ) s -6.760 nx sp (in ) s
-6.740 nx sp (the ) s -6.760 nx sp (parm ) s -6.740 nx sp 12229 ss 1800 12229 mt (block, it is invoked as follows:) s
(Times-Bold02000200) gf 12549 ss 1800 12549 mt 360.000 nx sp 1440.000 nx sp (\(*\(parmblock.wrConversion\)\)\(read_status, pdpvt\);) s
(Times-Roman02400240) gf 12917 ss 1800 12917 mt (For more information on the secondary conversion function, see the section "Machines That ) s
13205 ss 1800 13205 mt (Respond ) s -5.520 nx sp (to ) s -5.540 nx sp (Everything." ) s
sp (For ) s -5.520 nx sp (more ) s -5.540 nx sp (information ) s sp (of ) s -5.520 nx sp
(the ) s -5.540 nx sp (use ) s sp (of ) s -5.520 nx sp (<f11>, ) s -5.540 nx sp (see ) s sp
(the ) s -5.520 nx sp (section ) s -5.540 nx sp ("Efast ) s sp (Tables".) s 13573 ss
1800 13573 mt (Note that setting <f8> to a non-NULL value is invalid for this operation type. Results in that case ) s
13861 ss 1800 13861 mt (should be considered catastrophic.) s
(Times-Bold02000200) gf 14181 ss 1800 14181 mt (GPIBEFASTI) s
(Times-Roman02400240) gf 14549 ss 1800 14549 mt (This operation type is only valid on BI and MBBI record types.) s
showpage vm_state restore


save /vm_state exch def [1 0 0 -1 0 0] concat 0.050000 0.050000 sc .5 slw
0 -15840 tr 0 ro
np 0 0 mt 0 15840 lnt 12240 15840 lnt 12240 0 lnt cp clip
userdict /#copies 1 put 1253 ss 1800 1253 mt (Times-Roman02400240) gf (1\)) s
161.000 nx sp (Send the command string specified in <f4> to the instrument exactly as specified.) s
1621 ss 1800 1621 mt (2\)) s sp (Read the data from the instrument and place it into the ) s
(Times-Bold02000200) gf (dpvt.msg) s (Times-Roman02400240) gf ( buffer.) s 1989 ss
1800 1989 mt (3\)) s sp (Compare ) s (Times-Bold02000200) gf (dpvt.msg) s
(Times-Roman02400240) gf ( against each element of the Efast Table.) s 2357 ss
1800 2357 mt (4\)) s sp (Set the VAL field to the entry number of the first Efast Table element that matched.) s
2725 ss 1800 2725 mt (Note that setting <f8> to a non-NULL value is invalid for this operation type. Results in that case ) s
3013 ss 1800 3013 mt (should be considered catastrophic.) s
(Times-Bold02000200) gf 3333 ss 1800 3333 mt (GPIBEFASTIW) s
(Times-Roman02400240) gf 3701 ss 1800 3701 mt (This operation type is only valid on BI and MBBI record types.) s
4069 ss 1800 4069 mt (In order to use this, there must be an ) s
(Times-Bold02000200) gf (srqHandler) s (Times-Roman02400240) gf ( defined in the parm block.) s
4437 ss 1800 4437 mt (1\)) s sp (Send the command string specified in <f4> to the instrument exactly as specified.) s
4805 ss 1800 4805 mt (2\)) s sp (Set ) s (Times-Bold02000200) gf (hwpvt.srqCallback) s
(Times-Roman02400240) gf ( to the record-type specific SRQ handling function.) s
5173 ss 1800 5173 mt (3\)) s sp (Wait for an SRQ interrupt from the device. \(Will be caught by ) s
(Times-Bold02000200) gf (parmBlock.srqHandler) s (Times-Roman02400240) gf (\)) s
5541 ss 1800 5541 mt (4\)) s sp (The ) s (Times-Bold02000200) gf (srqHandler) s
(Times-Roman02400240) gf ( should call ) s (Times-Bold02000200) gf (hwpvt.srqCallback ) s
(Times-Roman02400240) gf (to deal with it when it arrives.) s 5909 ss
1800 5909 mt (5\)) s sp (Data is read from the instrument and placed in dpvt.msg.) s
6277 ss 1800 6277 mt (6\)) s sp (Compare ) s (Times-Bold02000200) gf (dpvt.msg) s
(Times-Roman02400240) gf ( against each element of the Efast Table.) s 6645 ss
1800 6645 mt (7\)) s sp (Set the VAL field to the entry number of the first Efast Table element that matched.) s
7013 ss 1800 7013 mt (Note that setting <f8> to a non-NULL value is invalid for this operation type. Results in that case ) s
7301 ss 1800 7301 mt (should be considered catastrophic.) s
(Times-Bold02000200) gf 7621 ss 1800 7621 mt (<f3>) s (Times-Roman02400240) gf
7989 ss 1800 7989 mt (Specifies the processing priority of the I/O operation when being executed by the actual GPIB ) s
8277 ss 1800 8277 mt (driver. This field must be set to either ) s
(Times-Bold02000200) gf (IB_Q_HIGH) s (Times-Roman02400240) gf ( or ) s
(Times-Bold02000200) gf (IB_Q_LOW.) s (Times-Roman02400240) gf ( These values are enumerated in ) s
8565 ss 1800 8565 mt (drvGpibInterface.h. ) s (Times-Bold02000200) gf 8885 ss
1800 8885 mt (<f4>) s (Times-Roman02400240) gf 9253 ss 1800 9253 mt (Specifies ) s
-0.560 nx sp (a ) s sp (constant ) s sp (string ) s sp (that ) s sp (is ) s sp (used ) s sp (differently ) s
-0.580 nx sp (depending ) s -0.560 nx sp (on ) s sp (the ) s sp (value ) s sp (of ) s sp (<f2>. ) s
sp (See ) s sp (the ) s -0.580 nx sp (discus-) s 9541 ss 1800 9541 mt (sion of <f2> for more information. Set this field to NULL if not used.) s
(Times-Bold02000200) gf 9861 ss 1800 9861 mt (<f5>) s (Times-Roman02400240) gf
10229 ss 1800 10229 mt (Specifies ) s -0.560 nx sp (a ) s sp (constant ) s sp (string ) s
sp (that ) s sp (is ) s sp (used ) s sp (differently ) s -0.580 nx sp (depending ) s
-0.560 nx sp (on ) s sp (the ) s sp (value ) s sp (of ) s sp (<f2>. ) s sp (See ) s sp (the ) s
-0.580 nx sp (discus-) s 10517 ss 1800 10517 mt (sion of <f2> for more information. Set this field to NULL if not used.) s
(Times-Bold02000200) gf 10837 ss 1800 10837 mt (<f6>) s (Times-Roman02400240) gf
11205 ss 1800 11205 mt (This is used to specify the length of the buffer that is pointed to by ) s
(Times-Bold02000200) gf (dpvt.rsp) s (Times-Roman02400240) gf (.  It is used to hold the  ) s
11493 ss 1800 11493 mt (message that is read back from a device when performing a responds-to-writes read operation. ) s
11861 ss 1800 11861 mt (Set this field to zero when not used. ) s 12229 ss
1800 12229 mt (See the section "Machines That Respond to Everything" for more information.) s
(Times-Bold02000200) gf 12549 ss 1800 12549 mt (<f7>) s (Times-Roman02400240) gf
12917 ss 1800 12917 mt (This is used to specify the length of the buffer that is pointed to by ) s
(Times-Bold02000200) gf (dpvt.msg) s (Times-Roman02400240) gf (.  The buffer is only ) s
13205 ss 1800 13205 mt (used when <f2> is set to ) s (Times-Bold02000200) gf (GPIBWRITE, GPIBREAD, ) s
(Times-Roman02400240) gf (or) s (Times-Bold02000200) gf ( GPIBREADW) s
(Times-Roman02400240) gf (. Set this field to zero when not ) s 13493 ss
1800 13493 mt (used.) s (Times-Bold02000200) gf 13813 ss 1800 13813 mt (<f8>) s
(Times-Roman02400240) gf 14181 ss 1800 14181 mt (Points ) s -11.500 nx sp (to ) s
sp (a ) s sp (function ) s sp (that ) s sp (is ) s sp (called ) s sp (to ) s sp (perform ) s sp (the ) s
sp (entire ) s sp (I/O ) s sp (operation ) s sp (when ) s sp (<f2> ) s sp (is ) s sp (set ) s sp (to ) s
sp (Times-Bold02000200) gf (GPIBSOFT) s (Times-Roman02400240) gf (, ) s sp 14469 ss
1800 14469 mt (or ) s -0.560 nx sp (to ) s sp (perform ) s sp (a ) s sp (conversion/parsing ) s
sp (operation ) s sp (when ) s sp (<f2> ) s -0.580 nx sp (is ) s -0.560 nx sp (set ) s sp (to ) s
sp (any ) s sp (of ) s sp (the ) s sp (other ) s sp (operation ) s -0.580 nx sp (types. ) s
-0.560 nx sp showpage vm_state restore


save /vm_state exch def [1 0 0 -1 0 0] concat 0.050000 0.050000 sc .5 slw
0 -15840 tr 0 ro
np 0 0 mt 0 15840 lnt 12240 15840 lnt 12240 0 lnt cp clip
userdict /#copies 1 put 1253 ss 1800 1253 mt (Times-Roman02400240) gf (Note that this function is intended to be used to generate and parse strings being sent to and from ) s
1541 ss 1800 1541 mt (an ) s -0.600 nx sp (instrument, ) s -0.620 nx sp (but ) s
-0.600 nx sp (can ) s -0.620 nx sp (be ) s -0.600 nx sp (used ) s -0.620 nx sp (for ) s
-0.600 nx sp (anything. ) s -0.620 nx sp (Great ) s sp (care ) s -0.600 nx sp (should ) s
-0.620 nx sp (be ) s -0.600 nx sp (taken ) s -0.620 nx sp (in ) s -0.600 nx sp (these ) s
-0.620 nx sp (functions ) s -0.600 nx sp (so ) s -0.620 nx sp (as ) s sp (to ) s
-0.600 nx sp 1829 ss 1800 1829 mt (not overflow the ) s (Times-Bold02000200) gf
(dpvt.msg) s (Times-Roman02400240) gf ( field when it is being used. This function is passed <f9>, <f10>, and ) s
2117 ss 1800 2117 mt (<f11> as parameters.) s 2485 ss 1800 2485 mt (For ) s
-1.340 nx sp (output ) s -1.360 nx sp (type ) s sp (operations, ) s sp (this ) s sp (custom ) s
sp (conversion ) s sp (function ) s -1.340 nx sp (is ) s -1.360 nx sp (called ) s sp (to ) s
sp (generate ) s sp (the ) s sp (string ) s sp (\(possi-) s 2773 ss 1800 2773 mt (bly ) s
-5.200 nx sp (using ) s -5.220 nx sp (the ) s -5.200 nx sp (records ) s -5.220 nx sp (VAL ) s
-5.200 nx sp (field\) ) s -5.220 nx sp (that ) s -5.200 nx sp (is ) s -5.220 nx sp (to ) s
-5.200 nx sp (be ) s -5.220 nx sp (sent ) s -5.200 nx sp (to ) s -5.220 nx sp (the ) s
-5.200 nx sp (instrument. ) s -5.220 nx sp (For ) s -5.200 nx sp (input ) s
-5.220 nx sp (type ) s -5.200 nx sp (operations, ) s -5.220 nx sp (it ) s sp (is ) s
-5.200 nx sp 3061 ss 1800 3061 mt (called to scan the response string from the instrument \(and fill in the records VAL field.\) It is ) s
3349 ss 1800 3349 mt (highly ) s -2.520 nx sp (recommended ) s -2.540 nx sp (that ) s
sp (if ) s -2.520 nx sp (a ) s -2.540 nx sp (custom ) s sp (conversion ) s -2.520 nx sp (routine ) s
-2.540 nx sp (be ) s sp (used, ) s -2.520 nx sp (that ) s -2.540 nx sp (the ) s sp (designer ) s
-2.520 nx sp (of ) s -2.540 nx sp (the ) s sp (function ) s -2.520 nx sp 3637 ss
1800 3637 mt (be familiar with the record-specific library function that calls it.) s
4005 ss 1800 4005 mt (The function should be declared as returning an int. This return value is passed back to the caller ) s
4293 ss 1800 4293 mt (of the device support module after a processing request when <f2> is set to ) s
(Times-Bold02000200) gf (GPIBSOFT) s (Times-Roman02400240) gf ( and is ) s 4581 ss
1800 4581 mt (ignored in other cases.) s 4949 ss 1800 4949 mt (This field must be set to NULL when no conversion function is present.) s
(Times-Bold02000200) gf 5269 ss 1800 5269 mt (<f9>) s (Times-Roman02400240) gf
5637 ss 1800 5637 mt (This is an integer that is passed to any conversion function specified in <f8>. It may be used for ) s
5925 ss 1800 5925 mt (any purpose the designer wishes.) s
(Times-Bold02000200) gf 6245 ss 1800 6245 mt (<f10>) s (Times-Roman02400240) gf
6613 ss 1800 6613 mt (This is an integer that is passed to any conversion function specified in <f8>. It may be used for ) s
6901 ss 1800 6901 mt (any purpose the designer wishes.) s
(Times-Bold02000200) gf 7221 ss 1800 7221 mt (<f11>) s (Times-Roman02400240) gf
7589 ss 1800 7589 mt (This field plays a double role. When the parameter table entry has a custom conversion routine, it ) s
7877 ss 1800 7877 mt (is passed to the conversion routine specified in <f8>. When <f2> is one of the ) s
(Times-Bold02000200) gf (EFAST) s (Times-Roman02400240) gf ( operations, ) s
8165 ss 1800 8165 mt (this field points to the EFAST table. See the EFAST operation descriptions under the <f2> field ) s
8453 ss 1800 8453 mt (definitions and the section "Efast Tables" for more on the use of this field.) s
8821 ss 1800 8821 mt (Set this field to NULL when it is not used.) s
(Times-Bold02000200) gf 9141 ss 1800 9141 mt (<f12>) s (Times-Roman02400240) gf
9509 ss 1800 9509 mt (This field points to the Name Table. Name tables are described in the section "Name Tables".) s
9877 ss 1800 9877 mt (Set this to NULL when no Name Table is used.) s
(Times-Bold02000200) gf 10197 ss 1800 10197 mt (<f13>) s
(Times-Roman02400240) gf 10565 ss 1800 10565 mt (This field is currently unused and must be set to -1. It is planned that it will be used in the future ) s
10853 ss 1800 10853 mt (as part of the initialization process.) s
(Times-Roman02800280) gf 11269 ss 1440 11269 mt (1.4.3  Efast \(Enumerated Fast I/O\) Tables) s
(Times-Roman02400240) gf 11597 ss 1800 11597 mt (There ) s -11.560 nx sp (are ) s
sp (many ) s sp (times ) s sp (when ) s sp (a ) s sp (device's ) s sp (command ) s
-11.580 nx sp (set ) s -11.560 nx sp (includes ) s sp (things ) s sp (like ) s sp ("TERM ) s
sp ( ) s sp (LO" ) s sp (and ) s -11.580 nx sp ("TERM ) s -11.560 nx sp ( ) s sp 11885 ss
1800 11885 mt (HI" ) s -7.940 nx sp (to ) s sp (set ) s sp (the ) s sp (impedance. ) s sp (Or ) s
sp (something ) s sp (with ) s sp (an ) s sp ("OFF" ) s sp (or ) s sp ("ON" ) s sp (in ) s sp (the ) s
sp (command ) s sp (string. ) s sp (These ) s -7.960 nx sp (also ) s -7.940 nx sp
12173 ss 1800 12173 mt (just ) s -7.660 nx sp (so ) s sp (happen ) s -7.680 nx sp (to ) s
-7.660 nx sp (be ) s sp (the ) s -7.680 nx sp (types ) s -7.660 nx sp (of ) s sp (commands ) s
-7.680 nx sp (that ) s -7.660 nx sp (are ) s sp (tied ) s -7.680 nx sp (to ) s
-7.660 nx sp (binary ) s sp (and ) s -7.680 nx sp (multibit ) s -7.660 nx sp (binary ) s
sp (record ) s -7.680 nx sp (types. ) s -7.660 nx sp 12461 ss 1800 12461 mt (And in order to generate a "TERM  LO" from a BO record when the value is zero, and a "TERM  ) s
12749 ss 1800 12749 mt (HI" then the value is one, the sprintf style formatting provided for ) s
(Times-Bold02000200) gf (GPIBWRITE) s (Times-Roman02400240) gf ( operations \(see ) s
13037 ss 1800 13037 mt (description of ) s (Times-Bold02000200) gf (<f2>) s
(Times-Roman02400240) gf ( above\), you have to use a custom conversion routine. And a custom function ) s
13325 ss 1800 13325 mt (for every lousy binary and multibit binary supported function is outrageous.) s
13693 ss 1800 13693 mt (The efast tables are used to get around the formatting problem of these types of situations by ) s
13981 ss 1800 13981 mt (removing the formatting altogether. The device support module designer simply types in each of ) s
14269 ss 1800 14269 mt (the command or expected response strings for each of the possible states of the ) s
(Times-Bold02000200) gf (VAL) s (Times-Roman02400240) gf ( field of the ) s
14557 ss 1800 14557 mt (record.) s showpage vm_state restore


save /vm_state exch def [1 0 0 -1 0 0] concat 0.050000 0.050000 sc .5 slw
0 -15840 tr 0 ro
np 0 0 mt 0 15840 lnt 12240 15840 lnt 12240 0 lnt cp clip
userdict /#copies 1 put 1253 ss 1800 1253 mt (Times-Roman02400240) gf (The format of an efast table is:) s
(Times-Bold02000200) gf 1573 ss 1800 1573 mt 360.000 nx sp 1440.000 nx sp (static char) s
546.000 nx sp (*\(tableName[]\) = {) s 1893 ss 1800 1893 mt 360.000 nx sp
1440.000 nx sp sp sp ("TERM LO",) s 229.000 nx sp (/* when VAL = 0 */) s 2213 ss
1800 2213 mt 360.000 nx sp 1440.000 nx sp sp sp ("TERM HI",) s 285.000 nx sp (/* when VAL = 1 */) s
2533 ss 1800 2533 mt 360.000 nx sp 1440.000 nx sp sp sp (NULL};) s
(Times-Roman02400240) gf 2901 ss 1800 2901 mt (And is referenced in an output parameter table entry like this:) s
(Times-Bold02000200) gf 3221 ss 1800 3221 mt 360.000 nx sp 1440.000 nx sp ({&DSET_BO, GPIBEFASTO, IB_Q_HIGH, NULL, NULL, 0, 0,) s
3541 ss 1800 3541 mt 360.000 nx sp 1440.000 nx sp (NULL, 0, 0, tableName, NULL, -1},) s
(Times-Roman02400240) gf 3909 ss 1800 3909 mt (For an input entry, it would look like this:) s
(Times-Bold02000200) gf 4229 ss 1800 4229 mt 360.000 nx sp 1440.000 nx sp ({&DSET_BI, GPIBEFASTI, IB_Q_HIGH, NULL, NULL, 0, 50,) s
4549 ss 1800 4549 mt 360.000 nx sp 1440.000 nx sp (NULL, 0, 0, tableName, NULL, -1},) s
(Times-Roman02400240) gf 4917 ss 1800 4917 mt (The efast table MUST be null terminated when used for input record types. It is not required for ) s
5205 ss 1800 5205 mt (output records, but is a good idea anyway so that they all look the same. Otherwise you might ) s
5493 ss 1800 5493 mt (forget one on used for an input operation and spend all day looking for the problem.) s
5861 ss 1800 5861 mt (The way the the table is used for outputs is that the ) s
(Times-Bold02000200) gf (VAL) s (Times-Roman02400240) gf ( field is used to index into the efast table ) s
6149 ss 1800 6149 mt (and select which string to send to the instrument. The string is then sent to the instrument as it ) s
6437 ss 1800 6437 mt (appears in the efast table with no formatting.) s 6805 ss
1800 6805 mt (For input operations, the ) s (Times-Bold02000200) gf (<f4>) s
(Times-Roman02400240) gf ( string is sent to the instrument without formatting, and then the ) s
7093 ss 1800 7093 mt (response string is read from the instrument. This response string is compared against each of the ) s
7381 ss 1800 7381 mt (entries in the efast table starting at the zeroth entry. The slot number of the first table entry that ) s
7669 ss 1800 7669 mt (matches ) s -9.500 nx sp (the ) s sp (response ) s sp (string ) s
sp (is ) s sp (used ) s sp (as ) s sp (the ) s sp (setting ) s sp (for ) s sp (the ) s sp
(Times-Bold02000200) gf (RVAL) s (Times-Roman02400240) gf ( ) s sp (field ) s sp (of ) s
sp (the ) s sp (record. ) s sp (When ) s sp (strings ) s sp (are ) s sp 7957 ss 1800 7957 mt
(compared, ) s -4.520 nx sp (they ) s sp (are ) s -4.540 nx sp (compared ) s -4.520 nx sp
(from ) s -4.540 nx sp (left ) s -4.520 nx sp (to ) s -4.540 nx sp (right ) s
-4.520 nx sp (until ) s -4.540 nx sp (the ) s -4.520 nx sp (number ) s -4.540 nx sp (of ) s
-4.520 nx sp (characters ) s -4.540 nx sp (in ) s -4.520 nx sp (the ) s -4.540 nx sp (efast ) s
-4.520 nx sp (table ) s -4.540 nx sp (are ) s -4.520 nx sp 8245 ss 1800 8245 mt (checked. ) s
-1.400 nx sp (When ) s -1.420 nx sp (ALL ) s -1.400 nx sp (of ) s -1.420 nx sp (the ) s
-1.400 nx sp (characters ) s -1.420 nx sp (up ) s sp (to ) s -1.400 nx sp (but ) s
-1.420 nx sp (NOT ) s -1.400 nx sp (INCLUDING ) s -1.420 nx sp (the ) s sp (NULL ) s
-1.400 nx sp (of ) s -1.420 nx sp (the ) s -1.400 nx sp (string ) s -1.420 nx sp (in ) s
sp (the ) s -1.400 nx sp 8533 ss 1800 8533 mt (efast table match the corresponding characters of the response string, it is considered a valid ) s
8821 ss 1800 8821 mt (match. This allows the user to check response strings fairly fast. For example, it a device returns ) s
9109 ss 1800 9109 mt (something like "ON;XOFF;9600" or "OFF;XOFF;9600" in response to a status check, and you ) s
9397 ss 1800 9397 mt (wish to know if the first field is either "OFF" or "ON", your efast table could look like this:) s
(Times-Bold02000200) gf 9717 ss 1800 9717 mt 360.000 nx sp 1440.000 nx sp (static char) s
546.000 nx sp (*\(statCheck[]\) = {) s 10037 ss 1800 10037 mt 360.000 nx sp
1440.000 nx sp sp sp ("OF",) s 891.000 nx sp (/* set RVAL to 0 */) s 10357 ss
1800 10357 mt 360.000 nx sp 1440.000 nx sp sp sp ("ON",) s 868.000 nx sp (/* set RVAL to 1 */) s
10677 ss 1800 10677 mt 360.000 nx sp 1440.000 nx sp sp sp (NULL};) s
(Times-Roman02400240) gf 11045 ss 1800 11045 mt (Note again that the NULL field is important here.  If the instrument gets confused and responds ) s
11333 ss 1800 11333 mt (with something that does not start with an "OF" or "ON", the GPIB support library code will end ) s
11621 ss 1800 11621 mt (up running off the end of the table.) s 11989 ss
1800 11989 mt (In the case when none of the choices in an efast table match for an input operation, The record is ) s
12277 ss 1800 12277 mt (placed into a VALID alarm state.) s
(Times-Roman02800280) gf 12693 ss 1440 12693 mt (1.4.4  Name Tables) s
(Times-Roman02400240) gf 13021 ss 1800 13021 mt (For binary and multibit binary records, an Application Developer must type in all the name fields ) s
13309 ss 1800 13309 mt (for each of the possible values the VAL field can be set to. This can be a nuisance if the user has ) s
13597 ss 1800 13597 mt (many devices of the same type to make records for. Name tables can be added to binary and ) s
13885 ss 1800 13885 mt (multibit ) s -11.000 nx sp (binary ) s sp (records ) s sp (that ) s
sp (can ) s sp (be ) s sp (used ) s sp (to ) s sp (fill ) s sp (in ) s sp (these ) s sp (name ) s sp
(fields ) s sp (for ) s sp (the ) s sp (database ) s sp (designer ) s sp (so ) s sp (they ) s sp
14173 ss 1800 14173 mt (may be left blank when viewed from DCT.) s 14541 ss
1800 14541 mt (Before continuing, it should be understood that these name tables have absolutely NOTHING to ) s
showpage vm_state restore


save /vm_state exch def [1 0 0 -1 0 0] concat 0.050000 0.050000 sc .5 slw
0 -15840 tr 0 ro
np 0 0 mt 0 15840 lnt 12240 15840 lnt 12240 0 lnt cp clip
userdict /#copies 1 put 1253 ss 1800 1253 mt (Times-Roman02400240) gf (do with the operation of the GPIB device support library with respect to the way any I/O ) s
1541 ss 1800 1541 mt (operations are performed.) s 1909 ss 1800 1909 mt (To use a name table, the address of the table must be put into <f12> of the parameter table. The ) s
2197 ss 1800 2197 mt (table format for a multibit record type looks like this:) s
2565 ss 1800 2565 mt 360.000 nx sp (Times-Bold02000200) gf 1440.000 nx sp (static  char            *tABCDList[] = {) s
2885 ss 1800 2885 mt 360.000 nx sp 1440.000 nx sp sp ("T",) s 1035.000 nx sp (/* zrst*/) s
3205 ss 1800 3205 mt 360.000 nx sp 1440.000 nx sp sp ("A",) s 1024.000 nx sp (/* onst */) s
3525 ss 1800 3525 mt 360.000 nx sp 1440.000 nx sp sp ("B",) s 1035.000 nx sp (/* twst */) s
3845 ss 1800 3845 mt 360.000 nx sp 1440.000 nx sp sp ("C",) s 1024.000 nx sp (/* thst */) s
4165 ss 1800 4165 mt 360.000 nx sp 1440.000 nx sp sp ("D" };) s 879.000 nx sp (/* frst */) s
4485 ss 1800 4485 mt 360.000 nx sp 1440.000 nx sp (static  unsigned long   tABCDVal[] = {) s
4805 ss 1800 4805 mt 360.000 nx sp 1440.000 nx sp sp (1,) s 1290.000 nx sp (/* zrvl */) s
5125 ss 1800 5125 mt 360.000 nx sp 1440.000 nx sp sp (2,) s 1290.000 nx sp (/* onvl */) s
5445 ss 1800 5445 mt 360.000 nx sp 1440.000 nx sp sp (3,) s 1290.000 nx sp (/* twvl */) s
5765 ss 1800 5765 mt 360.000 nx sp 1440.000 nx sp sp (5,) s 1290.000 nx sp (/* thvl */) s
6085 ss 1800 6085 mt 360.000 nx sp 1440.000 nx sp sp (6 };) s 1145.000 nx sp (/* frvl */) s
6405 ss 1800 6405 mt 360.000 nx sp 1440.000 nx sp (static  struct  devGpibNames    tABCD = {) s
6725 ss 1800 6725 mt 360.000 nx sp 1440.000 nx sp sp (5,) s 1290.000 nx sp (/* number of elements in string table */) s
7045 ss 1800 7045 mt 360.000 nx sp 1440.000 nx sp sp (tABCDList,) s
424.000 nx sp (/* pointer to string table */) s 7365 ss 1800 7365 mt
360.000 nx sp 1440.000 nx sp sp (tABCDVal,) s 457.000 nx sp (/* pointer to value table */) s
7685 ss 1800 7685 mt 360.000 nx sp 1440.000 nx sp sp (3 };) s 1145.000 nx sp (/* value for the nobt field */) s
(Times-Roman02400240) gf 8053 ss 1800 8053 mt (The table format for a binary record type looks like this:) s
(Times-Bold02000200) gf 8373 ss 1800 8373 mt 360.000 nx sp 1440.000 nx sp (static  char    *disableEnableList[] = { ) s
8693 ss 1800 8693 mt 360.000 nx sp 1440.000 nx sp sp ("Disable", ) s
485.000 nx sp 1440.000 nx sp (/* znam */) s 9013 ss 1800 9013 mt 360.000 nx sp
1440.000 nx sp sp ("Enable" };) s 423.000 nx sp 1440.000 nx sp (/* onam */) s
9333 ss 1800 9333 mt 360.000 nx sp 1440.000 nx sp (static  struct  devGpibNames   disableEnable = {) s
9653 ss 1800 9653 mt 360.000 nx sp 1440.000 nx sp sp (2, ) s 1240.000 nx sp
1440.000 nx sp (/* number of elements */) s 9973 ss 1800 9973 mt 360.000 nx sp
1440.000 nx sp sp (disableEnableList,) s 1297.000 nx sp (/* pointer to strings */) s
10293 ss 1800 10293 mt 360.000 nx sp 1440.000 nx sp sp ( NULL,) s 785.000 nx sp
1440.000 nx sp (/* pointer to value list */) s 10613 ss 1800 10613 mt
360.000 nx sp 1440.000 nx sp sp (1};) s 1195.000 nx sp 1440.000 nx sp (/* number of valid bits */) s
(Times-Roman02400240) gf 10981 ss 1800 10981 mt (The ) s -9.500 nx sp
(Times-Bold02000200) gf (devGpibNames) s (Times-Roman02400240) gf ( ) s sp (structure ) s
sp (is ) s sp (defined ) s sp (in ) s sp (the ) s sp (Times-Bold02000200) gf (devCommonGpib.h) s
(Times-Roman02400240) gf ( ) s sp (header ) s sp (file. ) s sp (The ) s sp (first ) s sp (thing ) s
sp (you ) s sp (need ) s sp 11269 ss 1800 11269 mt (is the list of name strings. This is done by the declaration of an array of pointers to strings. For ) s
11557 ss 1800 11557 mt (binary record types, the strings are placed into the name fields in order from lowest to highest as ) s
11845 ss 1800 11845 mt (shown above. For multibit binary records, there can be up to sixteen strings defined.) s
12213 ss 1800 12213 mt (After the table of strings is defined, you define a ) s
(Times-Bold02000200) gf (devGpibNames) s (Times-Roman02400240) gf ( structure that includes the number ) s
12501 ss 1800 12501 mt (of ) s -4.940 nx sp (strings/name ) s -4.960 nx sp (fields ) s
-4.940 nx sp (to ) s -4.960 nx sp (fill ) s -4.940 nx sp (in, ) s -4.960 nx sp (a ) s
-4.940 nx sp (pointer ) s -4.960 nx sp (to ) s -4.940 nx sp (the ) s -4.960 nx sp (table ) s
-4.940 nx sp (of ) s -4.960 nx sp (strings, ) s -4.940 nx sp (a ) s -4.960 nx sp (pointer ) s
-4.940 nx sp (to ) s -4.960 nx sp (the ) s -4.940 nx sp (table ) s -4.960 nx sp (of ) s
-4.940 nx sp (values, ) s -4.960 nx sp (and ) s -4.940 nx sp 12789 ss 1800 12789 mt
(the number of bits field \(a multi-bit record's ) s (Times-Bold02000200) gf (NOBT) s
(Times-Roman02400240) gf ( field.\)) s 13157 ss 1800 13157 mt (The ) s
-10.460 nx sp (value ) s -10.480 nx sp (list ) s -10.460 nx sp (pointer, ) s
-10.480 nx sp (and ) s -10.460 nx sp (NOBT ) s -10.480 nx sp (field ) s -10.460 nx sp
(are ) s -10.480 nx sp (not ) s -10.460 nx sp (used ) s -10.480 nx sp (for ) s
-10.460 nx sp (binary ) s -10.480 nx sp (record ) s -10.460 nx sp (types, ) s
-10.480 nx sp (but ) s -10.460 nx sp (should ) s -10.480 nx sp (be ) s sp (specified ) s
-10.460 nx sp 13445 ss 1800 13445 mt (anyway as if the binary record was a multibit binary record with only 2 values.) s
13813 ss 1800 13813 mt (For multibit record types, the name strings, values, and NOBT fields are filled in from the name ) s
14101 ss 1800 14101 mt (table information. For binary record types, only the znam and onam fields are filled in.) s
14469 ss 1800 14469 mt (Name strings \(and their associated values in the multibit cases\) are not filled in if the database ) s
showpage vm_state restore


save /vm_state exch def [1 0 0 -1 0 0] concat 0.050000 0.050000 sc .5 slw
0 -15840 tr 0 ro
np 0 0 mt 0 15840 lnt 12240 15840 lnt 12240 0 lnt cp clip
userdict /#copies 1 put 1253 ss 1800 1253 mt (Times-Roman02400240) gf (designer fills them in via DCT.) s
(Times-Roman02800280) gf 1669 ss 1800 1669 mt 2085 ss 1440 2085 mt (1.4.5  The Parm Block) s
(Times-Roman02400240) gf 2413 ss 1800 2413 mt (The ) s -7.740 nx sp (parm ) s
-7.760 nx sp (block ) s -7.740 nx sp (is ) s -7.760 nx sp (used ) s -7.740 nx sp (as ) s
-7.760 nx sp (the ) s -7.740 nx sp (interface ) s -7.760 nx sp (between ) s
-7.740 nx sp (your ) s -7.760 nx sp (module ) s -7.740 nx sp (and ) s -7.760 nx sp (the ) s
-7.740 nx sp (GPIB ) s -7.760 nx sp (device ) s -7.740 nx sp (support ) s -7.760 nx sp
(library. ) s -7.740 nx sp 2701 ss 1800 2701 mt (It contains pointers to your debug flag, parameter table, SRQ handler, secondary conversion ) s
2989 ss 1800 2989 mt (routine, ) s -1.120 nx sp (and ) s -1.140 nx sp (values ) s sp (for ) s
-1.120 nx sp (time-outs ) s -1.140 nx sp (and ) s sp (other ) s -1.120 nx sp (parameters. ) s
-1.140 nx sp (These ) s sp (items ) s -1.120 nx sp (are ) s -1.140 nx sp (accessed ) s sp
(by ) s -1.120 nx sp (the ) s -1.140 nx sp (library ) s sp (by ) s -1.120 nx sp 3277 ss
1800 3277 mt (way of your module's DSET\(s\).) s 3645 ss 1800 3645 mt (A sample parm block looks like this:) s
(Times-Bold02000200) gf 3965 ss 1800 3965 mt (struct  devGpibParmBlock devSupParms = {) s
4285 ss 1800 4285 mt (  &Dc5009Debug,) s 295.000 nx sp 1440.000 nx sp (/* debugging flag pointer */) s
4605 ss 1800 4605 mt (  -1,) s 44.000 nx sp 1440.000 nx sp sp (/* set to -1 if device does not respond to writes */) s
4925 ss 1800 4925 mt (  300,) s 1350.000 nx sp 1440.000 nx sp (/* # of clock ticks to skip after a device times out */) s
5245 ss 1800 5245 mt (  NULL,) s 1095.000 nx sp 1440.000 nx sp (/* hwpvt list head */) s
5565 ss 1800 5565 mt (  gpibCmds,) s 772.000 nx sp 1440.000 nx sp (/* GPIB command array \(parameter table\) */) s
5885 ss 1800 5885 mt (  NUMPARAMS,) s 317.000 nx sp 1440.000 nx sp (/* number of supported parameters */) s
6205 ss 1800 6205 mt (  -1,) s 44.000 nx sp 1440.000 nx sp sp (/* magic SRQ param number \(-1 if none\) */) s
6525 ss 1800 6525 mt (  "devXxDc5009Gpib",) s 1257.000 nx sp (/* device support module type name */) s
6845 ss 1800 6845 mt (  DMA_TIME,) s 539.000 nx sp 1440.000 nx sp (/* # of clock ticks to wait for DMA completions */) s
7165 ss 1800 7165 mt (   NULL,) s 1045.000 nx sp 1440.000 nx sp (/* SRQ handler function \(NULL if none\) */) s
7485 ss 1800 7485 mt (   NULL) s 1095.000 nx sp 1440.000 nx sp (/* secondary conversion routine \(NULL if none\) */) s
7805 ss 1800 7805 mt (};) s (Times-Roman02400240) gf 8173 ss 1800 8173 mt (The debugging flag pointer must point to a integer that is set to a non-zero value if you want the ) s
8461 ss 1800 8461 mt (GPIB device support library to provide debugging output for you. ) s
8829 ss 1800 8829 mt (The ) s -5.000 nx sp (responding ) s sp (to ) s sp (writes ) s sp (flag ) s
sp (is ) s sp (a ) s sp (kluge ) s sp (that ) s sp (is ) s sp (used ) s sp (to ) s sp (indicate ) s
sp (that ) s sp (all ) s sp (output-type ) s sp (commands ) s sp (\(see ) s sp 9117 ss
1800 9117 mt (the section "The parameter table"\) to this device type will solicit a response from the device. See ) s
9405 ss 1800 9405 mt (the section on "Machines that Respond to Everything" for more information about this.) s
9773 ss 1800 9773 mt (The ) s -2.880 nx sp (next ) s sp (field ) s -2.900 nx sp (represents ) s
-2.880 nx sp (the ) s -2.900 nx sp (amount ) s -2.880 nx sp (of ) s -2.900 nx sp (time ) s
-2.880 nx sp (\(in ) s -2.900 nx sp (60ths ) s -2.880 nx sp (of ) s sp (a ) s
-2.900 nx sp (second\) ) s -2.880 nx sp (that ) s -2.900 nx sp (the ) s -2.880 nx sp (GPIB ) s
-2.900 nx sp (system ) s -2.880 nx sp (will ) s -2.900 nx sp (wait ) s -2.880 nx sp
10061 ss 1800 10061 mt (after ) s -5.240 nx sp (a ) s -5.260 nx sp (device ) s
-5.240 nx sp (times-out, ) s -5.260 nx sp (before ) s -5.240 nx sp (trying ) s
-5.260 nx sp (to ) s -5.240 nx sp (contact ) s -5.260 nx sp (it ) s -5.240 nx sp (again. ) s
-5.260 nx sp (During ) s -5.240 nx sp (this ) s -5.260 nx sp (time ) s -5.240 nx sp (window, ) s
-5.260 nx sp (any ) s -5.240 nx sp (I/O ) s -5.260 nx sp (opera-) s 10349 ss
1800 10349 mt (tions ) s -9.500 nx sp (that ) s sp (are ) s sp (directed ) s sp (at ) s sp (the ) s
sp (timed ) s sp (out ) s sp (device ) s sp (will ) s sp (result ) s sp (in ) s sp (an ) s sp (error ) s
sp (and ) s sp (the ) s sp (appropriate ) s sp (alarm ) s sp (status ) s sp 10637 ss
1800 10637 mt (will be raised for the record \(either ) s
(Times-Bold02000200) gf (READ_ALARM) s (Times-Roman02400240) gf ( or ) s
(Times-Bold02000200) gf (WRITE_ALARM) s (Times-Roman02400240) gf ( depending on the record ) s
10925 ss 1800 10925 mt (type and ) s (Times-Bold02000200) gf (VALID_ALARM) s
(Times-Roman02400240) gf ( in all cases.\) For more about this and other exceptional conditions, see ) s
11213 ss 1800 11213 mt (the sections on "SRQ Functions" and "General GPIB Problems.") s
11581 ss 1800 11581 mt (The ) s -2.820 nx sp (hwpvt ) s -2.840 nx sp (list ) s sp (head ) s
-2.820 nx sp (is ) s -2.840 nx sp (the ) s sp (head ) s -2.820 nx sp (pointer ) s
-2.840 nx sp (to ) s sp (a ) s -2.820 nx sp (singly ) s -2.840 nx sp (linked ) s sp (list ) s
-2.820 nx sp (of ) s -2.840 nx sp (structures ) s sp (that ) s -2.820 nx sp (are ) s
-2.840 nx sp (called ) s sp (hardware ) s -2.820 nx sp 11869 ss 1800 11869 mt (private blocks. There are one of these hwpvt blocks allocated for each instance of a device type ) s
12157 ss 1800 12157 mt (supported by this GPIB device support module. They contain information needed by the GPIB ) s
12445 ss 1800 12445 mt (device ) s -9.420 nx sp (support ) s -9.440 nx sp (library ) s
sp (that ) s sp (describes ) s sp (the ) s sp (current ) s sp (state ) s sp (of ) s
-9.420 nx sp (each ) s -9.440 nx sp (device. ) s sp (This ) s sp (includes ) s sp (the ) s
sp (time ) s sp (the ) s sp (last ) s -9.420 nx sp 12733 ss 1800 12733 mt (time-out happened, total number of time-outs processed by the library \(this will not include ) s
13021 ss 1800 13021 mt (time-outs ) s -5.140 nx sp (that ) s sp (happen ) s sp (in ) s sp
(result ) s sp (to ) s sp (I/O ) s -5.160 nx sp (operations ) s -5.140 nx sp (initiated ) s
sp (by ) s sp (the ) s sp (interactive ) s sp (GPIB ) s sp (debugging ) s -5.160 nx sp (tool\), ) s
-5.140 nx sp 13309 ss 1800 13309 mt (a user private pointer that may be used by a device support module designer for any reason \(it is ) s
13597 ss 1800 13597 mt (not referenced by any of the library code\), and some information about SRQ interrupt processing ) s
13885 ss 1800 13885 mt (\(see the section "SRQ Functions" for more on these fields.\) The hwpvt structures are built and ) s
14173 ss 1800 14173 mt (maintained by the GPIB device support library and unless additional information is needed on a ) s
14461 ss 1800 14461 mt (per-device instance basis, you may ignore their existence entirely. The proper initialization of the ) s
showpage vm_state restore


save /vm_state exch def [1 0 0 -1 0 0] concat 0.050000 0.050000 sc .5 slw
0 -15840 tr 0 ro
np 0 0 mt 0 15840 lnt 12240 15840 lnt 12240 0 lnt cp clip
userdict /#copies 1 put 1253 ss 1800 1253 mt (Times-Roman02400240) gf (hwpvt field is as shown above, NULL. If you should decide that you want to use the user private ) s
1541 ss 1800 1541 mt (pointer, ) s -10.720 nx sp (you ) s -10.740 nx sp (should ) s sp
(read ) s -10.720 nx sp (the ) s -10.740 nx sp (section ) s sp ("Talking ) s
-10.720 nx sp (to ) s -10.740 nx sp (Machines ) s sp (that ) s -10.720 nx sp (Don't ) s
-10.740 nx sp (Fit ) s sp (Into ) s -10.720 nx sp (the ) s -10.740 nx sp (Required ) s sp
(Model.") s 1909 ss 1800 1909 mt (The command array pointer is a pointer to the parameter table.) s
2277 ss 1800 2277 mt (The ) s -2.920 nx sp (number ) s -2.940 nx sp (of ) s sp (supported ) s
-2.920 nx sp (parameters ) s -2.940 nx sp (is ) s sp (next ) s -2.920 nx sp (and ) s
-2.940 nx sp (represents ) s sp (the ) s -2.920 nx sp (number ) s -2.940 nx sp (of ) s sp
(entries ) s -2.920 nx sp (in ) s -2.940 nx sp (the ) s sp (parameter ) s -2.920 nx sp
2565 ss 1800 2565 mt (table. The standard template uses a simple #define to calculate this value. If you use it, you need ) s
2853 ss 1800 2853 mt (not concern yourself with it.) s 3221 ss 1800 3221 mt (The ) s
-1.760 nx sp (magic ) s sp (SRQ ) s sp (param ) s sp (number ) s -1.780 nx sp (is ) s
-1.760 nx sp (only ) s sp (used ) s sp (if ) s -1.780 nx sp (you ) s -1.760 nx sp (have ) s
sp (an ) s sp (SRQ ) s -1.780 nx sp (handler ) s -1.760 nx sp (specified. ) s sp (See ) s sp
("The ) s -1.780 nx sp (SRQ ) s -1.760 nx sp 3509 ss 1800 3509 mt (Handler" and "SRQ Functions" for more information on this.) s
3877 ss 1800 3877 mt (The ) s -9.700 nx sp (device ) s sp (support ) s sp (module ) s
-9.720 nx sp (type ) s -9.700 nx sp (name ) s sp (field ) s -9.720 nx sp (is ) s
-9.700 nx sp (used ) s sp (by ) s sp (the ) s -9.720 nx sp (GPIB ) s -9.700 nx sp (support ) s
sp (library ) s -9.720 nx sp (code ) s -9.700 nx sp (when ) s sp (it ) s -9.720 nx sp (prints ) s
-9.700 nx sp 4165 ss 1800 4165 mt (debugging ) s -7.920 nx sp (information. ) s sp
(The ) s -7.940 nx sp (string ) s -7.920 nx sp (declared ) s -7.940 nx sp (here ) s
-7.920 nx sp (is ) s -7.940 nx sp (prepended ) s -7.920 nx sp (to ) s sp (any ) s
-7.940 nx sp (debugging ) s -7.920 nx sp (text ) s -7.940 nx sp (printed ) s
-7.920 nx sp (by ) s -7.940 nx sp (the ) s -7.920 nx sp 4453 ss 1800 4453 mt (library. ) s
-0.320 nx sp (If ) s -0.340 nx sp (you ) s sp (do ) s -0.320 nx sp (not ) s -0.340 nx sp
(wish ) s sp (to ) s -0.320 nx sp (have ) s -0.340 nx sp (anything ) s sp (printed, ) s
-0.320 nx sp (you ) s -0.340 nx sp (must ) s sp (specify ) s -0.320 nx sp (a ) s
-0.340 nx sp (null ) s sp (string, ) s -0.320 nx sp (not ) s -0.340 nx sp (the ) s sp (NULL ) s
-0.320 nx sp 4741 ss 1800 4741 mt (pointer.) s 5109 ss 1800 5109 mt (The time to wait for DMA completions is passed on to the driver and used to determine if a ) s
5397 ss 1800 5397 mt (machine times out on a transaction or not. If the transfer of the data portion of a GPIB message is ) s
5685 ss 1800 5685 mt (not ) s -6.560 nx sp (complete ) s sp (within ) s sp (the ) s sp (time ) s
sp (specified ) s sp (by ) s sp (this ) s -6.580 nx sp (field, ) s -6.560 nx sp (the ) s sp
(transaction ) s sp (is ) s sp (considered ) s sp (timed ) s sp (out, ) s sp (and ) s
-6.580 nx sp (an ) s -6.560 nx sp 5973 ss 1800 5973 mt (appropriate ) s
-6.920 nx sp (VALID_ALARM ) s sp (is ) s sp (raised ) s sp (for ) s sp (the ) s sp (record ) s
-6.940 nx sp (being ) s -6.920 nx sp (processed. ) s sp (The ) s sp (value ) s sp (specified ) s
sp (for ) s -6.940 nx sp (this ) s -6.920 nx sp 6261 ss 1800 6261 mt (field must be in 60ths of a second.) s
6629 ss 1800 6629 mt (The pointer to the SRQ handler function should point to a function with the following prototype ) s
6917 ss 1800 6917 mt (format:) s (Times-Bold02000200) gf ( ) s -5.620 nx sp (static ) s
sp (int ) s sp (srqHandler\(struct ) s -5.640 nx sp (hwpvt ) s -5.620 nx sp (*phwpvt; ) s
sp (int ) s sp (srqStatus;\) ) s -5.640 nx sp (Times-Roman02400240) gf (It ) s
-6.740 nx sp (will ) s -6.760 nx sp (be ) s -6.740 nx sp (called ) s -6.760 nx sp (when ) s
-6.740 nx sp (ever ) s -6.760 nx sp (an ) s -6.740 nx sp (SRQ ) s -6.760 nx sp (is ) s
-6.740 nx sp 7205 ss 1800 7205 mt (detected ) s -10.040 nx sp (from ) s
-10.060 nx sp (one ) s sp (of ) s sp (the ) s sp (devices ) s sp (supported ) s sp (by ) s sp (the ) s
sp (GPIB ) s sp (support ) s sp (module. ) s sp (If ) s sp (SRQs ) s sp (are ) s sp (to ) s sp (be ) s
sp (ignored ) s -10.040 nx sp 7493 ss 1800 7493 mt (for the supported device type, this must be set to NULL. See the section "The SRQ Handler" for ) s
7781 ss 1800 7781 mt (more information.) s 8149 ss 1800 8149 mt (The secondary conversion routine is used in cases where the responds to writes field is not set to ) s
8437 ss 1800 8437 mt (-1. If a machine responds to writes, this field can be used to specify a function to call after the ) s
8725 ss 1800 8725 mt (response is read from the device. It is offered here to allow the support module to inspect the ) s
9013 ss 1800 9013 mt (response. If no response checking is to be done, this field must be set to NULL. Please see the ) s
9301 ss 1800 9301 mt (section on "Machines that Respond to Everything" for more information about this.) s
(Times-Roman02800280) gf 9717 ss 1440 9717 mt (1.4.6  The SRQ Handler) s
(Times-Roman02400240) gf 10045 ss 1800 10045 mt (This section describes the general operation of the SRQ handling function that may be defined in ) s
10333 ss 1800 10333 mt (the parm block for a specific device type.) s 10701 ss
1800 10701 mt (The overall purpose of an SRQ handler is to determine if a given SRQ is expected, and if so call ) s
10989 ss 1800 10989 mt (the required function\(s\) required to handle it. In the cases where an SRQ is not expected, it is up ) s
11277 ss 1800 11277 mt (to the designer of the module designer to decide how to handle them.) s
11645 ss 1800 11645 mt (The SRQ handler is provided a pointer to the ) s
(Times-Bold02000200) gf (hwpvt) s (Times-Roman02400240) gf ( structure as well as the byte value returned ) s
11933 ss 1800 11933 mt (from ) s -9.100 nx sp (the ) s -9.120 nx sp (serial ) s
-9.100 nx sp (poll ) s -9.120 nx sp (made ) s -9.100 nx sp (to ) s -9.120 nx sp (the ) s
-9.100 nx sp (device. ) s -9.120 nx sp (Since ) s sp (the ) s -9.100 nx sp (device ) s
-9.120 nx sp (driver ) s -9.100 nx sp (has ) s -9.120 nx sp (no ) s -9.100 nx sp (way ) s
-9.120 nx sp (of ) s -9.100 nx sp (knowing ) s -9.120 nx sp (what ) s sp (record ) s
-9.100 nx sp 12221 ss 1800 12221 mt (\(if ) s -4.600 nx sp (any\) ) s sp (that ) s sp
(the ) s sp (SRQ ) s sp (is ) s sp (to ) s sp (be ) s sp (associated ) s sp (with, ) s sp (the ) s sp
(SRQ ) s sp (handler ) s sp (has ) s sp (to ) s sp (figure ) s sp (it ) s sp (out. ) s sp (To ) s sp
(make ) s sp (things ) s sp 12509 ss 1800 12509 mt (a little easier, the GPIB library code stores the address of the ) s
(Times-Bold02000200) gf (dpvt) s (Times-Roman02400240) gf ( structure as well as the record ) s
12797 ss 1800 12797 mt (type specific SRQ processing function into the ) s
(Times-Bold02000200) gf (hwpvt) s (Times-Roman02400240) gf ( structure for any record that is being ) s
13085 ss 1800 13085 mt (processed that is expecting an SRQ. The library also informs the driver that no transactions are to ) s
13373 ss 1800 13373 mt (be made to the device while waiting for the SRQ by returning a ) s
(Times-Bold02000200) gf (BUSY) s (Times-Roman02400240) gf ( status to the driver when ) s
13661 ss 1800 13661 mt (entering the wait state for the SRQ. This assures that the ) s
(Times-Bold02000200) gf (dpvt) s (Times-Roman02400240) gf ( and function pointers in the ) s
(Times-Bold02000200) gf (hwpvt) s (Times-Roman02400240) gf ( ) s 13949 ss
1800 13949 mt (structure are valid when the expected SRQ arrives.) s 14317 ss
1800 14317 mt (See ) s -7.500 nx sp (the ) s sp (skeleton ) s sp (GPIB ) s sp (device ) s sp
(support ) s sp (module ) s sp (for ) s sp (an ) s sp (example ) s sp (of ) s sp (handling ) s sp
(solicited ) s sp (and ) s sp (unsolicited ) s sp 14605 ss 1800 14605 mt (SRQs.) s
(Times-Roman02800280) gf showpage vm_state restore


save /vm_state exch def [1 0 0 -1 0 0] concat 0.050000 0.050000 sc .5 slw
0 -15840 tr 0 ro
np 0 0 mt 0 15840 lnt 12240 15840 lnt 12240 0 lnt cp clip
userdict /#copies 1 put 1282 ss 1800 1282 mt (Times-Roman02800280) gf (Solicited SRQ Handling) s
(Times-Roman02400240) gf 1650 ss 1800 1650 mt (Solicited ) s -0.280 nx sp (SRQs ) s
sp (are ) s sp (generated ) s -0.300 nx sp (by ) s -0.280 nx sp (specific ) s sp (commands ) s
-0.300 nx sp (that ) s -0.280 nx sp (are ) s sp (specified ) s sp (in ) s -0.300 nx sp (the ) s
-0.280 nx sp (parameter ) s sp (table. ) s -0.300 nx sp (The ) s -0.280 nx sp 1938 ss
1800 1938 mt (only types of parameter table entries that are allowed to solicit SRQs are ) s
(Times-Bold02000200) gf (GPIBREADW) s (Times-Roman02400240) gf ( and ) s
(Times-Bold02000200) gf 2226 ss 1800 2226 mt (GPIBEFASTIW) s
(Times-Roman02400240) gf (. ) s -6.420 nx sp (In ) s -6.440 nx sp (these ) s sp (cases, ) s
sp (it ) s sp (is ) s sp (expected ) s sp (that ) s sp (the ) s -6.420 nx sp (command ) s
-6.440 nx sp (string ) s sp (is ) s sp (expected ) s sp (to ) s sp (solicit ) s sp (an ) s sp (SRQ ) s
-6.420 nx sp 2514 ss 1800 2514 mt (that indicates that an operation has completed.) s
2882 ss 1800 2882 mt (If an SRQ is expected, the ) s (Times-Bold02000200) gf (dpvt) s
(Times-Roman02400240) gf ( and record specific processing function addresses will be waiting ) s
3170 ss 1800 3170 mt (in the hwpvt structure as outlined above. So to handle this type of SRQ, check to see if one was ) s
3458 ss 1800 3458 mt (expected \(the function pointer being non-NULL\) and then invoke the handling function.) s
(Times-Roman02800280) gf 3874 ss 1440 3874 mt (1.4.6.1  Unsolicited SRQ Handling) s
(Times-Roman02400240) gf 4202 ss 1800 4202 mt (A sane way of dealing with unsolicited SRQs has yet to be determined. The only information ) s
4490 ss 1800 4490 mt (available when these occur, is the device address and the poll status. It is completely up to the ) s
4778 ss 1800 4778 mt (device ) s -6.600 nx sp (support ) s -6.620 nx sp (module ) s
-6.600 nx sp (designer ) s -6.620 nx sp (as ) s -6.600 nx sp (to ) s -6.620 nx sp (what ) s
-6.600 nx sp (should ) s -6.620 nx sp (be ) s sp (done ) s -6.600 nx sp (in ) s
-6.620 nx sp (these ) s -6.600 nx sp (cases. ) s -6.620 nx sp (At ) s -6.600 nx sp (the ) s
-6.620 nx sp (this ) s -6.600 nx sp (time, ) s -6.620 nx sp (the ) s sp (only ) s
-6.600 nx sp 5066 ss 1800 5066 mt (recommended action is to try to associate the SRQs with the processing of a record that is ) s
5354 ss 1800 5354 mt (I/O-event scanned.) s 5722 ss 1800 5722 mt (New work is being done in the area of dealing with event scanned records as this document is ) s
6010 ss 1800 6010 mt (being written. So no example code is currently available. However, the following discussion ) s
6298 ss 1800 6298 mt (should ) s -0.700 nx sp (provide ) s -0.720 nx sp (enough ) s sp
(information ) s -0.700 nx sp (for ) s -0.720 nx sp (a ) s sp (developer ) s sp (to ) s
-0.700 nx sp (create ) s -0.720 nx sp (an ) s sp (I/O-event ) s -0.700 nx sp (scanned ) s
-0.720 nx sp (record ) s sp (that ) s sp (can ) s -0.700 nx sp 6586 ss 1800 6586 mt (be processed when unsolicited SRQs are recognized by the ) s
(Times-Bold02000200) gf (srqHandler) s (Times-Roman02400240) gf ( function.) s
6954 ss 1800 6954 mt (When it has been determined that an SRQ does not represent a solicited operation complete, a ) s
7242 ss 1800 7242 mt (record may be processed by the use of a ) s
(Times-Bold02000200) gf (callbackRequest) s (Times-Roman02400240) gf (\(\) or a ) s
(Times-Bold02000200) gf (scanIoRequest) s (Times-Roman02400240) gf (\(\) function. These can ) s
7530 ss 1800 7530 mt (process ) s -4.660 nx sp (a ) s sp (record ) s -4.680 nx sp (provided ) s
-4.660 nx sp (that ) s sp (the ) s -4.680 nx sp (device ) s -4.660 nx sp (support ) s sp
(module ) s -4.680 nx sp (can ) s -4.660 nx sp (remember ) s sp (which ) s -4.680 nx sp (one\(s\) ) s
-4.660 nx sp (is\(are\) ) s sp (to ) s -4.680 nx sp (be ) s -4.660 nx sp 7818 ss
1800 7818 mt (processed.) s 8186 ss 1800 8186 mt (Currently, the magic SRQ param number specified in the parm block is recognized by the GPIB ) s
8474 ss 1800 8474 mt (library ) s -9.340 nx sp (code ) s -9.360 nx sp (as ) s sp (a ) s
sp (parameter ) s sp (that ) s sp (records ) s sp (can ) s -9.340 nx sp (specify ) s
-9.360 nx sp (that ) s sp (require ) s sp (processing ) s sp (when ) s sp (unsolicited ) s
sp (SRQs ) s -9.340 nx sp 8762 ss 1800 8762 mt (are recognized. The library will only allow one record for each device to be defined that specifies ) s
9050 ss 1800 9050 mt (the magic number \(in contrast to one per device type.\) When these records are initialized, the ) s
9338 ss 1800 9338 mt (address of their ) s (Times-Bold02000200) gf (dpvt) s
(Times-Roman02400240) gf ( structures are saved in the ) s
(Times-Bold02000200) gf (hwpvt) s (Times-Roman02400240) gf ( structures associated with the physical ) s
9626 ss 1800 9626 mt (devices. So when an unsolicited SRQ comes along, processing  the right record is fairly straight ) s
9914 ss 1800 9914 mt (forward. Make a ) s (Times-Bold02000200) gf (callbackRequest) s
(Times-Roman02400240) gf ( to the record processing entry point for the record represented by ) s
10202 ss 1800 10202 mt (the ) s -0.640 nx sp (saved ) s sp (Times-Bold02000200) gf
(dpvt) s (Times-Roman02400240) gf ( ) s sp (address. ) s sp (\(see ) s sp (the ) s sp (skeleton ) s
-0.660 nx sp (GPIB ) s -0.640 nx sp (device ) s sp (support's ) s sp (sample ) s sp
(Times-Bold02000200) gf (srqHandler) s (Times-Roman02400240) gf ( ) s sp (function ) s
sp (for ) s -0.660 nx sp (an ) s -0.640 nx sp 10490 ss 1800 10490 mt (example of this.\)) s
10858 ss 1800 10858 mt (In the future, it is expected that all record processing for unsolicited SRQs will be done by using ) s
11146 ss 1800 11146 mt (the ) s (Times-Bold02000200) gf (scanIoRequest ) s
(Times-Roman02400240) gf (function.) s (Times-Roman02800280) gf 11562 ss
1440 11562 mt (1.4.7  Debugging Flags) s (Times-Roman02400240) gf 11890 ss
1800 11890 mt (The  device support library provides some debugging output for exceptional conditions during ) s
12178 ss 1800 12178 mt (normal ) s -1.300 nx sp (processing ) s -1.320 nx sp (if ) s
sp (the ) s sp (debug ) s -1.300 nx sp (flag ) s -1.320 nx sp (in ) s sp (the ) s sp (parm ) s
sp (block ) s -1.300 nx sp (is ) s -1.320 nx sp (set ) s sp (to ) s sp (a ) s sp (non-zero ) s
-1.300 nx sp (value. ) s -1.320 nx sp (It ) s sp (will ) s sp (also ) s sp (prefix ) s
-1.300 nx sp 12466 ss 1800 12466 mt (its debug statements with the module type name string also defined in the parm block.) s
(Times-Roman02800280) gf 12882 ss 1440 12882 mt (1.4.8  Talking to Machines That Don't Fit Into The Required Model) s
(Times-Roman02400240) gf 13210 ss 1800 13210 mt (Machines that don't really fit into the simple transaction model defined by the GPIB device ) s
13498 ss 1800 13498 mt (support library will require either the addition of some custom code to perform the information ) s
13786 ss 1800 13786 mt (conversions, ) s -2.360 nx sp (or ) s -2.380 nx sp (sometimes ) s
sp (a ) s sp (total ) s -2.360 nx sp (replacement ) s -2.380 nx sp (of ) s sp (some ) s sp (or ) s
-2.360 nx sp (all ) s -2.380 nx sp (of ) s sp (the ) s sp (library ) s -2.360 nx sp (code. ) s
-2.380 nx sp (The ) s sp (more ) s sp (library ) s -2.360 nx sp 14074 ss 1800 14074 mt
(code ) s -2.720 nx sp (that ) s -2.740 nx sp (is ) s sp (removed, ) s sp (the ) s sp (more ) s
sp (difficult ) s -2.720 nx sp (it ) s -2.740 nx sp (will ) s sp (be ) s sp (to ) s sp (keep ) s
sp (up ) s -2.720 nx sp (with ) s -2.740 nx sp (changes ) s sp (in ) s sp (EPICS ) s sp (and ) s
sp (the ) s sp (GPIB ) s -2.720 nx sp 14362 ss 1800 14362 mt (driver\(s\). However, there is nothing that prevents a developer from doing so when required.) s
showpage vm_state restore


save /vm_state exch def [1 0 0 -1 0 0] concat 0.050000 0.050000 sc .5 slw
0 -15840 tr 0 ro
np 0 0 mt 0 15840 lnt 12240 15840 lnt 12240 0 lnt cp clip
userdict /#copies 1 put 1253 ss 1800 1253 mt (Times-Roman02400240) gf (It will be a good idea to start your code design copying the part\(s\) of the GPIB device support ) s
1541 ss 1800 1541 mt (library ) s -1.920 nx sp (into ) s -1.940 nx sp (your ) s sp (module ) s
sp (that ) s sp (require ) s sp (replacement. ) s sp (This ) s sp (way ) s -1.920 nx sp (you ) s
-1.940 nx sp (will ) s sp (have ) s sp (an ) s sp (example ) s sp (of ) s sp (an ) s sp (oper-) s
1829 ss 1800 1829 mt (ational version of your code with all the correct parameters and data types defined on the calls to ) s
2117 ss 1800 2117 mt (the actual GPIB driver.) s (Times-Roman02800280) gf
2533 ss 1440 2533 mt (1.4.8.1  Custom Conversion Routines) s
(Times-Roman02400240) gf 2861 ss 1800 2861 mt (When a device's response can not be parsed with a simple sscanf or whose commands can not be ) s
3149 ss 1800 3149 mt (formatted ) s -5.560 nx sp (with ) s -5.580 nx sp (an ) s
-5.560 nx sp (sprintf. ) s -5.580 nx sp (A ) s -5.560 nx sp (customized ) s
-5.580 nx sp (conversion ) s sp (routine ) s -5.560 nx sp (will ) s -5.580 nx sp (be ) s
-5.560 nx sp (required. ) s -5.580 nx sp (These ) s -5.560 nx sp (are ) s -5.580 nx sp
(supplied ) s sp (in ) s -5.560 nx sp 3437 ss 1800 3437 mt (the form as a function with a prototype of:) s
3805 ss 1800 3805 mt 360.000 nx sp 1440.000 nx sp (Times-Bold02000200) gf (static int specialConvert\(struct gpibDpvt *pdpvt; int p1; int p2; char **p3;\)) s
(Times-Roman02400240) gf 4173 ss 1800 4173 mt (and are specified in the parameter table. See the discussion of the <f8> field above for more ) s
4461 ss 1800 4461 mt (information about the parameter table entry.) s 4829 ss
1800 4829 mt (Given the address of the ) s (Times-Bold02000200) gf (dpvt) s
(Times-Roman02400240) gf ( structure as well as the developer-entered values for ) s
(Times-Bold02000200) gf (p1) s (Times-Roman02400240) gf (, ) s
(Times-Bold02000200) gf (p2) s (Times-Roman02400240) gf (, and ) s
(Times-Bold02000200) gf (p3) s (Times-Roman02400240) gf ( ) s 5117 ss 1800 5117 mt
(\(that ) s -5.060 nx sp (come ) s -5.080 nx sp (from ) s -5.060 nx sp (the ) s
-5.080 nx sp (parameter ) s -5.060 nx sp (table\), ) s -5.080 nx sp (the ) s sp (custom ) s
-5.060 nx sp (conversion ) s -5.080 nx sp (function ) s -5.060 nx sp (should ) s
-5.080 nx sp (have ) s -5.060 nx sp (all ) s -5.080 nx sp (the ) s sp (informa-) s
5405 ss 1800 5405 mt (tion required to perform the needed conversion\(s\).) s
5773 ss 1800 5773 mt (For some examples of various conversion routines, see the Dg535 device support module.) s
(Times-Roman02800280) gf 6189 ss 1440 6189 mt (1.4.8.2  Machines that Respond to Everything) s
(Times-Roman02400240) gf 6517 ss 1800 6517 mt (One of the basic problems with the \(current\) implementation of the GPIB device support library ) s
6805 ss 1800 6805 mt (code, is that there is no way to perform read operations that consist of the formatting of the ) s
7093 ss 1800 7093 mt (command sent to the instrument and the parsing of the response returned from it. In general this ) s
7381 ss 1800 7381 mt (has not been much of a problem since most vendors of GPIB devices use strictly defined ) s
7669 ss 1800 7669 mt (commands that solicit responses from their devices. However, some devices send back replies to ) s
7957 ss 1800 7957 mt (everything.) s 8325 ss 1800 8325 mt (The GPIB device support library currently supports devices like these by providing a flag in the ) s
8613 ss 1800 8613 mt (parm ) s -6.520 nx sp (block ) s sp (that ) s -6.540 nx sp (can ) s
-6.520 nx sp (be ) s -6.540 nx sp (set ) s -6.520 nx sp (to ) s -6.540 nx sp (a ) s
-6.520 nx sp (non-negative ) s -6.540 nx sp (value ) s -6.520 nx sp (indicating ) s
-6.540 nx sp (that ) s -6.520 nx sp (the ) s -6.540 nx sp (library ) s -6.520 nx sp (should ) s
-6.540 nx sp (read ) s -6.520 nx sp (data ) s -6.540 nx sp (from ) s -6.520 nx sp
8901 ss 1800 8901 mt (the device on every type of operation defined in the parameter table. ) s
9269 ss 1800 9269 mt (If ) s -0.800 nx sp (the ) s -0.820 nx sp (responds ) s sp (to ) s
sp (writes ) s sp (flag ) s sp (in ) s sp (the ) s sp (parm ) s sp (block ) s sp (is ) s sp (not ) s
-0.800 nx sp (set ) s -0.820 nx sp (to ) s sp (-1, ) s sp (the ) s sp (library ) s sp (will ) s
sp (wait ) s sp (for ) s sp (a ) s sp (period ) s sp (of ) s -0.800 nx sp 9557 ss
1800 9557 mt (time specified by this flag and then perform a read operation from the device. The data from the ) s
9845 ss 1800 9845 mt (read operation will be placed into ) s
(Times-Bold02000200) gf (dpvt.rsp) s (Times-Roman02400240) gf (. And then a call will be made to the secondary ) s
10133 ss 1800 10133 mt (conversion routine \(if not specified as NULL in the parm block\) and it will be passed the status ) s
10421 ss 1800 10421 mt (from the read operation and the address of the dpvt structure. The prototype of a secondary ) s
10709 ss 1800 10709 mt (conversion routine function is:) s
(Times-Roman02800280) gf 11125 ss 1800 11125 mt 360.000 nx sp 1440.000 nx sp
(Times-Bold02000200) gf (static int secondaryConversion\(int status; struct gpibDpvt *pdpvt;\)) s
(Times-Roman02400240) gf 11493 ss 1800 11493 mt (Where ) s
(Times-Bold02000200) gf (status) s (Times-Roman02400240) gf ( is the number of bytes read from the device or -1 if the read operation failed. And ) s
(Times-Bold02000200) gf 11781 ss 1800 11781 mt (pdpvt) s
(Times-Roman02400240) gf ( is the address of the dpvt structure associated with the record being processed.) s
12149 ss 1800 12149 mt (The ) s -0.460 nx sp (return ) s sp (value ) s -0.480 nx sp (from ) s
-0.460 nx sp (the ) s sp (secondary ) s -0.480 nx sp (conversion ) s -0.460 nx sp (function ) s
sp (must ) s -0.480 nx sp (either ) s -0.460 nx sp (be ) s sp (Times-Bold02000200) gf
(OK) s (Times-Roman02400240) gf ( ) s -0.480 nx sp (or ) s -0.460 nx sp
(Times-Bold02000200) gf (ERROR) s (Times-Roman02400240) gf (. ) s sp (If ) s
-0.480 nx sp (Times-Bold02000200) gf (ERROR) s (Times-Roman02400240) gf ( ) s
-0.460 nx sp 12437 ss 1800 12437 mt (is returned the record will be placed into a ) s
(Times-Bold02000200) gf (VALID_ALARM) s (Times-Roman02400240) gf ( state. Otherwise, the processing of the ) s
12725 ss 1800 12725 mt (I/O operation will be completed as normal.) s 13093 ss
1800 13093 mt (In ) s -1.920 nx sp (the ) s -1.940 nx sp (future, ) s sp (modifications ) s
sp (the ) s sp (the ) s sp (GPIB ) s sp (library ) s sp (will ) s -1.920 nx sp (be ) s
-1.940 nx sp (made ) s sp (to ) s sp (correct ) s sp (this ) s sp (problem ) s sp (and ) s sp (second-) s
13381 ss 1800 13381 mt (ary conversion routines will no longer be required or supported.) s
(Times-Roman02800280) gf (Times-Roman03200320) gf 13845 ss 1440 13845 mt (1.5  The GPIB Device Support Library) s
(Times-Roman02400240) gf 14253 ss 1800 14253 mt (There ) s -3.620 nx sp (is ) s sp
(a ) s sp (library ) s -3.640 nx sp (of ) s -3.620 nx sp (commonly ) s sp (used ) s sp (functions ) s
-3.640 nx sp (available ) s -3.620 nx sp (to ) s sp (the ) s sp (GPIB ) s -3.640 nx sp (module ) s
-3.620 nx sp (designer. ) s sp ( ) s sp (It ) s -3.640 nx sp (contains ) s -3.620 nx sp
14541 ss 1800 14541 mt (enough ) s -5.820 nx sp (code ) s -5.840 nx sp (such ) s sp (that ) s
-5.820 nx sp (a ) s -5.840 nx sp (device ) s sp (support ) s -5.820 nx sp (module ) s
-5.840 nx sp (can ) s sp (be ) s -5.820 nx sp (written ) s -5.840 nx sp (that ) s sp (contains ) s
-5.820 nx sp (as ) s -5.840 nx sp (little ) s sp (as ) s -5.820 nx sp (two ) s
-5.840 nx sp (lines ) s sp (of ) s -5.820 nx sp showpage vm_state restore


save /vm_state exch def [1 0 0 -1 0 0] concat 0.050000 0.050000 sc .5 slw
0 -15840 tr 0 ro
np 0 0 mt 0 15840 lnt 12240 15840 lnt 12240 0 lnt cp clip
userdict /#copies 1 put 1253 ss 1800 1253 mt (Times-Roman02400240) gf (executable C code.) s
1621 ss 1800 1621 mt (All GPIB device support library functions have names that are prefixed with "devGpibLib_" and ) s
1909 ss 1800 1909 mt (include ) s -6.560 nx sp (the ) s sp (type ) s sp (of ) s sp (record ) s
sp (they ) s sp (apply ) s sp (to. ) s -6.580 nx sp ( ) s -6.560 nx sp (For ) s sp (example, ) s
sp (the ) s sp (devGpibLib_initAi\(\) ) s sp (function ) s sp (is ) s sp (used ) s
-6.580 nx sp (to ) s -6.560 nx sp 2197 ss 1800 2197 mt (initialize analog input records. And the devGpibLib_readAi\(\) function is used to fill in the VAL ) s
2485 ss 1800 2485 mt (field on an analog input record.) s
(Times-Roman02800280) gf 2901 ss 1440 2901 mt (1.5.1  Initialization Functions) s
(Times-Roman02400240) gf 3229 ss 1800 3229 mt (The initialization functions are used to verify the validity of information in the device support ) s
3517 ss 1800 3517 mt (module as well as the information in a database record before any database record processing ) s
3805 ss 1800 3805 mt (begins.) s (Times-Roman02800280) gf 4221 ss 1440 4221 mt (1.5.1.1  General Initialization) s
(Times-Roman02400240) gf (Times-Bold02000200) gf 4501 ss 1800 4501 mt (long devGpibLib_initDevSup\(int parm; gDset *dset;\)) s
(Times-Roman02400240) gf 4869 ss 1800 4869 mt (Call with parm=0 before any calls are made to the record-type specific init functions, and again ) s
5157 ss 1800 5157 mt (with parm != 0 after all calls have been made to record-type specific init functions. The DSET ) s
5445 ss 1800 5445 mt (value must point to any one of the DSET data structures for the GPIB device type that is being ) s
5733 ss 1800 5733 mt (initialized.) s 6101 ss 1800 6101 mt (This function does nothing more than print an initialization time message. It might be used in the ) s
6389 ss 1800 6389 mt (future to initialize the value fields of output record types.) s
(Times-Roman02800280) gf 6805 ss 1440 6805 mt (1.5.1.2  Record Specific Initialization) s
(Times-Roman02400240) gf 7133 ss 1800 7133 mt (The record specific initialization functions are used to allocate and initialize any data structures ) s
7421 ss 1800 7421 mt (needed by the library. For all record types, the operations start the same way:) s
7789 ss 1800 7789 mt (1\)) s 161.000 nx sp (Allocate a ) s (Times-Bold02000200) gf
(dpvt) s (Times-Roman02400240) gf ( structure and connect it to the record.) s
8157 ss 1800 8157 mt (2\)) s sp (Verify that the ) s (Times-Bold02000200) gf (DTYPE) s
(Times-Roman02400240) gf ( field is either ) s (Times-Bold02000200) gf (GPIB_IO) s
(Times-Roman02400240) gf ( or ) s (Times-Bold02000200) gf (BBGPIB_IO) s
(Times-Roman02400240) gf (.) s 8525 ss 1800 8525 mt (3\)) s sp (Verify that the parameter number is within valid range.) s
8893 ss 1800 8893 mt (4\)) s sp (Allocate a ) s (Times-Bold02000200) gf (hwpvt) s
(Times-Roman02400240) gf ( structure if necessary.) s 9261 ss 1800 9261 mt (5\)) s
sp (Inform the GPIB driver of intended use of the link specified in the record.) s
9629 ss 1800 9629 mt (6\)) s sp (Verify the GPIB device address is within valid range.) s
9997 ss 1800 9997 mt (7\)) s sp (Verify that the parameter table entry's <f1> points to the same ) s
(Times-Bold02000200) gf (DSET) s (Times-Roman02400240) gf ( as the record's.) s
10365 ss 1800 10365 mt (8\)) s sp (Register the SRQ handler with the driver if one specified in the parm block.) s
10733 ss 1800 10733 mt (And then for each record type, operations complete as follows:) s
(Times-Bold02000200) gf 11053 ss 1800 11053 mt (long devGpibLib_initAi\(struct aiRecord *pai; void \(*process\)\(\);\)) s
(Times-Roman02400240) gf 11421 ss 1800 11421 mt (9\)) s sp (Verify that the parameter table entry operation is ) s
(Times-Bold02000200) gf (GPIBREAD) s (Times-Roman02400240) gf (, ) s
(Times-Bold02000200) gf (GPIBSOFT) s (Times-Roman02400240) gf (, or ) s
(Times-Bold02000200) gf (GPIBREADW) s (Times-Roman02400240) gf (.) s 11789 ss
1800 11789 mt (10\) Return a 0 to the calling function.) s
(Times-Bold02000200) gf 12109 ss 1800 12109 mt (long devGpibLib_initBi\(struct biRecord *pbi; void \(*process\)\(\);\)) s
(Times-Roman02400240) gf 12477 ss 1800 12477 mt (9\)) s sp (Verify ) s -6.540 nx sp
(that ) s sp (the ) s sp (parameter ) s -6.560 nx sp (table ) s -6.540 nx sp (entry ) s sp (operation ) s
sp (is ) s -6.560 nx sp (Times-Bold02000200) gf (GPIBREAD) s
(Times-Roman02400240) gf (, ) s -6.540 nx sp (Times-Bold02000200) gf (GPIBSOFT) s
(Times-Roman02400240) gf (, ) s sp (Times-Bold02000200) gf (GPIBEFASTI) s
(Times-Roman02400240) gf (, ) s -6.560 nx sp (Times-Bold02000200) gf (GPIBE-) s
12765 ss 1800 12765 mt (FASTIW) s (Times-Roman02400240) gf (, or ) s
(Times-Bold02000200) gf (GPIBREADW) s (Times-Roman02400240) gf (.) s 13133 ss
1800 13133 mt (10\) Return a 0 to the calling function.) s
(Times-Bold02000200) gf 13453 ss 1800 13453 mt (long devGpibLib_initLi\(struct  longinRecord *pli; void \(*process\)\(\);\)) s
(Times-Roman02400240) gf 13821 ss 1800 13821 mt (9\)) s 161.000 nx sp (Verify that the parameter table entry operation is ) s
(Times-Bold02000200) gf (GPIBREAD) s (Times-Roman02400240) gf (, ) s
(Times-Bold02000200) gf (GPIBSOFT) s (Times-Roman02400240) gf (, or ) s
(Times-Bold02000200) gf (GPIBREADW) s (Times-Roman02400240) gf (.) s 14189 ss
1800 14189 mt (10\) Return a 0 to the calling function.) s
(Times-Bold02000200) gf 14509 ss 1800 14509 mt (long devGpibLib_initMbbi\(struct mbbiRecord *pmbbi; void \(*process\)\(\);\)) s
(Times-Roman02400240) gf showpage vm_state restore


save /vm_state exch def [1 0 0 -1 0 0] concat 0.050000 0.050000 sc .5 slw
0 -15840 tr 0 ro
np 0 0 mt 0 15840 lnt 12240 15840 lnt 12240 0 lnt cp clip
userdict /#copies 1 put 1253 ss 1800 1253 mt (Times-Roman02400240) gf (9\)) s
161.000 nx sp (Verify ) s -6.540 nx sp (that ) s sp (the ) s sp (parameter ) s
-6.560 nx sp (table ) s -6.540 nx sp (entry ) s sp (operation ) s sp (is ) s -6.560 nx sp
(Times-Bold02000200) gf (GPIBREAD) s (Times-Roman02400240) gf (, ) s -6.540 nx sp
(Times-Bold02000200) gf (GPIBSOFT) s (Times-Roman02400240) gf (, ) s sp
(Times-Bold02000200) gf (GPIBEFASTI) s (Times-Roman02400240) gf (, ) s -6.560 nx sp
(Times-Bold02000200) gf (GPIBE-) s 1541 ss 1800 1541 mt (FASTIW) s
(Times-Roman02400240) gf (, or ) s (Times-Bold02000200) gf (GPIBREADW) s
(Times-Roman02400240) gf (.) s 1909 ss 1800 1909 mt (10\) Return a 0 to the calling function.) s
(Times-Bold02000200) gf 2229 ss 1800 2229 mt (long devGpibLib_initSi\(struct stringinRecord *psi; void \(*process\)\(\);\)) s
(Times-Roman02400240) gf 2597 ss 1800 2597 mt (9\)) s 161.000 nx sp (Verify that the parameter table entry operation is ) s
(Times-Bold02000200) gf (GPIBREAD) s (Times-Roman02400240) gf (, ) s
(Times-Bold02000200) gf (GPIBSOFT) s (Times-Roman02400240) gf (, or ) s
(Times-Bold02000200) gf (GPIBREADW) s (Times-Roman02400240) gf (.) s 2965 ss
1800 2965 mt (10\) Return a 0 to the calling function.) s
(Times-Bold02000200) gf 3285 ss 1800 3285 mt (long devGpibLib_initAo\(struct aoRecord *pao; void \(*process\)\(\);\)) s
(Times-Roman02400240) gf 3653 ss 1800 3653 mt (9\)) s sp (Verify that the parameter table entry operation is ) s
(Times-Bold02000200) gf (GPIBWRITE) s (Times-Roman02400240) gf (, ) s
(Times-Bold02000200) gf (GPIBSOFT) s (Times-Roman02400240) gf (, ) s
(Times-Bold02000200) gf (GPIBCMD) s (Times-Roman02400240) gf (, or ) s
(Times-Bold02000200) gf 3941 ss 1800 3941 mt (GPIBCNTL) s
(Times-Roman02400240) gf (.) s (Times-Bold02000200) gf (Times-Roman02400240) gf
4309 ss 1800 4309 mt (10\)) s 41.000 nx sp (Return a 2 to the calling function.) s
(Times-Bold02000200) gf 4629 ss 1800 4629 mt (long devGpibLib_initBo\(struct boRecord *pbo; void \(*process\)\(\);\)) s
(Times-Roman02400240) gf 4997 ss 1800 4997 mt (9\)) s 161.000 nx sp (Verify that the parameter table entry operation is ) s
(Times-Bold02000200) gf (GPIBWRITE) s (Times-Roman02400240) gf (, ) s
(Times-Bold02000200) gf (GPIBSOFT) s (Times-Roman02400240) gf (, ) s
(Times-Bold02000200) gf (GPIBCMD) s (Times-Roman02400240) gf (, ) s
(Times-Bold02000200) gf 5285 ss 1800 5285 mt (GPIBEFASTO) s
(Times-Roman02400240) gf (, or ) s (Times-Bold02000200) gf (GPIBCNTL) s
(Times-Roman02400240) gf (.) s 5653 ss 1800 5653 mt (10\)) s 41.000 nx sp (Return a 0 to the calling function.) s
(Times-Bold02000200) gf 5973 ss 1800 5973 mt (long devGpibLib_initLo\(struct longoutRecord *plo; void\(*process\)\(\);\)) s
(Times-Roman02400240) gf 6341 ss 1800 6341 mt (9\)) s 161.000 nx sp (Verify that the parameter table entry operation is ) s
(Times-Bold02000200) gf (GPIBWRITE) s (Times-Roman02400240) gf (, ) s
(Times-Bold02000200) gf (GPIBSOFT) s (Times-Roman02400240) gf (, ) s
(Times-Bold02000200) gf (GPIBCMD) s (Times-Roman02400240) gf (, or ) s
(Times-Bold02000200) gf 6629 ss 1800 6629 mt (GPIBCNTL) s
(Times-Roman02400240) gf (.) s (Times-Bold02000200) gf (Times-Roman02400240) gf
6997 ss 1800 6997 mt (10\)) s 41.000 nx sp (Return a 0 to the calling function.) s
(Times-Bold02000200) gf 7317 ss 1800 7317 mt (long devGpibLib_initMbbo\(struct mbboRecord *pmbbo; void \(*process\)\(\);\)) s
(Times-Roman02400240) gf 7685 ss 1800 7685 mt (9\)) s 161.000 nx sp (Verify that the parameter table entry operation is ) s
(Times-Bold02000200) gf (GPIBWRITE) s (Times-Roman02400240) gf (, ) s
(Times-Bold02000200) gf (GPIBSOFT) s (Times-Roman02400240) gf (, ) s
(Times-Bold02000200) gf (GPIBCMD) s (Times-Roman02400240) gf (, ) s
(Times-Bold02000200) gf 7973 ss 1800 7973 mt (GPIBEFASTO) s
(Times-Roman02400240) gf (, or ) s (Times-Bold02000200) gf (GPIBCNTL) s
(Times-Roman02400240) gf (.) s 8341 ss 1800 8341 mt (10\)) s 41.000 nx sp (Return a 0 to the calling function.) s
(Times-Bold02000200) gf 8661 ss 1800 8661 mt (long devGpibLib_initSo\(struct stringinRecord *psi; void \(*process\)\(\);\)) s
(Times-Roman02400240) gf 9029 ss 1800 9029 mt (9\)) s 161.000 nx sp (Verify that the parameter table entry operation is ) s
(Times-Bold02000200) gf (GPIBWRITE) s (Times-Roman02400240) gf (, ) s
(Times-Bold02000200) gf (GPIBSOFT) s (Times-Roman02400240) gf (, ) s
(Times-Bold02000200) gf (GPIBCMD) s (Times-Roman02400240) gf (, or ) s
(Times-Bold02000200) gf 9317 ss 1800 9317 mt (GPIBCNTL) s
(Times-Roman02400240) gf (.) s (Times-Bold02000200) gf (Times-Roman02400240) gf
9685 ss 1800 9685 mt (10\)) s 41.000 nx sp (Return a 0 to the calling function.) s
(Times-Bold02000200) gf (Times-Roman02800280) gf 10101 ss 1440 10101 mt (1.5.2  Report and Status Functions) s
(Times-Bold02000200) gf 10381 ss 1800 10381 mt (long devGpibLibReport\(gDset *dset;\)) s
(Times-Roman02400240) gf 10749 ss 1800 10749 mt (Print a one-liner report of the device name, its addressing information, link type  and the total ) s
11037 ss 1800 11037 mt (number of observed time-outs.  This function is provided so that the ) s
(Times-Bold02000200) gf (dbior) s (Times-Roman02400240) gf ( function can be used to ) s
11325 ss 1800 11325 mt (coarsely observe the operation of a device.) s
(Times-Roman02800280) gf 11741 ss 1440 11741 mt (1.5.3  Transaction Request Functions) s
(Times-Roman02400240) gf 12069 ss 1800 12069 mt (The transaction functions are used to perform the I/O operation associated with an initialized ) s
12357 ss 1800 12357 mt (database record. In general, they are called as a result of ) s
(Times-Bold02000200) gf (dbProcess) s (Times-Roman02400240) gf (\(\) processing a record.) s
(Times-Roman02800280) gf 12773 ss 1440 12773 mt (1.5.3.1  Input Functions) s
(Times-Roman02400240) gf 13101 ss 1800 13101 mt (This section describes the library functions that can be used to process a record that requires data ) s
13389 ss 1800 13389 mt (to ) s -6.320 nx sp (be ) s -6.340 nx sp (solicited ) s sp (from ) s
-6.320 nx sp (a ) s -6.340 nx sp (GPIB ) s sp (device. ) s -6.320 nx sp (If ) s
-6.340 nx sp (the ) s sp (record ) s -6.320 nx sp (being ) s -6.340 nx sp (processed ) s
sp (specifies ) s -6.320 nx sp (a ) s -6.340 nx sp (Times-Bold02000200) gf (GPIBSOFT) s
(Times-Roman02400240) gf ( ) s sp (parameter, ) s -6.320 nx sp 13677 ss
1800 13677 mt (the ) s -0.340 nx sp (soft-processing ) s -0.360 nx sp (takes ) s sp (place ) s
sp (immediately ) s sp (with ) s sp (no ) s sp (asynchronous ) s -0.340 nx sp (return ) s
-0.360 nx sp (to ) s sp (the ) s sp (caller. ) s sp (In ) s sp (all ) s sp (other ) s
-0.340 nx sp 13965 ss 1800 13965 mt (cases, the function queues a request to the GPIB driver and returns asynchronously.) s
14333 ss 1800 14333 mt (If the queue request to the driver fails, the record is placed in a ) s
(Times-Bold02000200) gf (VALID_ALARM) s (Times-Roman02400240) gf ( state.) s
showpage vm_state restore


save /vm_state exch def [1 0 0 -1 0 0] concat 0.050000 0.050000 sc .5 slw
0 -15840 tr 0 ro
np 0 0 mt 0 15840 lnt 12240 15840 lnt 12240 0 lnt cp clip
userdict /#copies 1 put 1253 ss 1800 1253 mt (Times-Roman02400240) gf (The return value from the second call in the asynchronous processing for each function is 2 for ) s
1541 ss 1800 1541 mt (each of the following functions except for the MBBI and BI versions... then the return value is 0.) s
(Times-Bold02000200) gf 1861 ss 1800 1861 mt (long devGpibLib_readAi\(struct aiRecord *pai;\)) s
2181 ss 1800 2181 mt (long devGpibLib_readBi\(struct biRecord *pbi;\)) s 2501 ss
1800 2501 mt (long devGpibLib_readLi\(struct longinRecord *pli;\)) s 2821 ss
1800 2821 mt (long devGpibLib_readMbbi\(struct mbbiRecord *pmbbi;\)) s 3141 ss
1800 3141 mt (long devGpibLib_readSi\(struct stringinRecord *psi;\)) s
(Times-Roman02800280) gf 3557 ss 1440 3557 mt (1.5.3.2  Output Functions) s
(Times-Roman02400240) gf 3885 ss 1800 3885 mt (This section describes the library functions that can be used to process a record that requires data ) s
4173 ss 1800 4173 mt (to be sent to a GPIB device. If the record being processed specifies a ) s
(Times-Bold02000200) gf (GPIBSOFT) s (Times-Roman02400240) gf ( parameter, the ) s
4461 ss 1800 4461 mt (soft-processing takes place immediately with no asynchronous return to the caller. In all other ) s
4749 ss 1800 4749 mt (cases, the function queues a request to the GPIB driver and returns asynchronously.) s
5117 ss 1800 5117 mt (If the queue request to the driver fails, the record is placed in a ) s
(Times-Bold02000200) gf (VALID_ALARM) s (Times-Roman02400240) gf ( state.) s
5485 ss 1800 5485 mt (The return value from the second call in the asynchronous processing is zero for each of the ) s
5773 ss 1800 5773 mt (following functions.) s (Times-Bold02000200) gf 6093 ss
1800 6093 mt (long devGpibLib_writeAo\(struct aoRecord *pao;\)) s 6413 ss
1800 6413 mt (long devGpibLib_writeBo\(struct boRecord *pbo;\)) s 6733 ss
1800 6733 mt (long devGpibLib_writeLo\(struct longoutRecord *plo;\)) s 7053 ss
1800 7053 mt (long devGpibLib_writeMbbo\(struct mbboRecord *pmbbo;\)) s 7373 ss
1800 7373 mt (long devGpibLib_writeSo\(struct stringoutRecord *pso;\)) s
(Times-Roman02800280) gf 7789 ss 1440 7789 mt (1.5.4  Transaction Processing Functions) s
(Times-Roman02400240) gf 8117 ss 1800 8117 mt (These ) s -1.920 nx sp (are ) s
-1.940 nx sp (the ) s sp (functions ) s sp (that ) s sp (perform ) s sp (the ) s sp (actual ) s
sp (I/O ) s -1.920 nx sp (operations ) s -1.940 nx sp (by ) s sp (making ) s sp (calls ) s
sp (to ) s sp (the ) s sp (GPIB ) s sp (driver. ) s -1.920 nx sp 8405 ss 1800 8405 mt (These ) s
-10.680 nx sp (functions ) s sp (are ) s -10.700 nx sp (called ) s -10.680 nx sp (by ) s
sp (the ) s -10.700 nx sp (driver's ) s -10.680 nx sp (link ) s -10.700 nx sp (task ) s
-10.680 nx sp (then ) s sp (the ) s -10.700 nx sp (driver ) s -10.680 nx sp (has ) s sp (determined ) s
-10.700 nx sp (that ) s -10.680 nx sp (a ) s -10.700 nx sp (transaction ) s
-10.680 nx sp 8693 ss 1800 8693 mt (request is ready for processing.) s
(Times-Roman02800280) gf 9109 ss 1440 9109 mt (1.5.4.1  Work Functions) s
(Times-Roman02400240) gf 9437 ss 1800 9437 mt (These functions are divided into two categories, an input group and an output group.) s
9805 ss 1800 9805 mt (The ) s -1.920 nx sp (output ) s -1.940 nx sp (group ) s sp (are ) s
sp (fairly ) s sp (simple. ) s sp (They ) s sp (format ) s sp (a ) s -1.920 nx sp (message ) s
-1.940 nx sp (as ) s sp (specified ) s sp (in ) s sp (the ) s sp (parameter ) s sp (table ) s
sp (and ) s -1.920 nx sp 10093 ss 1800 10093 mt (then call the driver to send it. After the message is sent, a ) s
(Times-Bold02000200) gf (callbackRequest) s (Times-Roman02400240) gf ( is made to ) s
(Times-Bold02000200) gf (dbProcess\(\)) s (Times-Roman02400240) gf ( so ) s
10381 ss 1800 10381 mt (that the second half of the asynchronous processing may take place. If the output operation fails, ) s
10669 ss 1800 10669 mt (the record is placed into a ) s (Times-Bold02000200) gf
(VALID_ALARM) s (Times-Roman02400240) gf ( state before the callback to ) s
(Times-Bold02000200) gf (dbProcess\(\)) s (Times-Roman02400240) gf ( is made. ) s
(Times-Bold02000200) gf 10989 ss 1800 10989 mt (int devGpibLib_aoGpibWork\(struct gpibDpvt *pdpvt;\)) s
11309 ss 1800 11309 mt (int devGpibLib_boGpibWork\(struct gpibDpvt *pdpvt;\)) s
11629 ss 1800 11629 mt (int devGpibLib_loGpibWork\(struct gpibDpvt *pdpvt;\)) s
11949 ss 1800 11949 mt (int devGpibLib_mbboGpibWork\(struct gpibDpvt *pdpvt;\)) s
12269 ss 1800 12269 mt (int devGpibLib_stringoutGpibWork\(struct gpibDpvt *pdpvt;\)) s
(Times-Roman02400240) gf 12637 ss 1800 12637 mt (The input group are a little more complex because a message is not only sent to a device, but a ) s
12925 ss 1800 12925 mt (response is read back afterward. If the parameter table entry specifies that it is to be treated as an ) s
13213 ss 1800 13213 mt (operation that includes an SRQ to indicate completion, these functions return to the driver before ) s
13501 ss 1800 13501 mt (reading the response message back. In the SRQ case, the driver will end up calling the ) s
(Times-Bold02000200) gf (srqHandler) s (Times-Roman02400240) gf ( ) s 13789 ss
1800 13789 mt (function defined in the parm block when it arrives. The ) s
(Times-Bold02000200) gf (srqHandler) s (Times-Roman02400240) gf ( is responsible for then calling ) s
14077 ss 1800 14077 mt (the record specific SRQ handling function described in the section "SRQ Functions" below. This ) s
14365 ss 1800 14365 mt (process is described in the section "The SRQ Handler" above.) s
showpage vm_state restore


save /vm_state exch def [1 0 0 -1 0 0] concat 0.050000 0.050000 sc .5 slw
0 -15840 tr 0 ro
np 0 0 mt 0 15840 lnt 12240 15840 lnt 12240 0 lnt cp clip
userdict /#copies 1 put 1253 ss 1800 1253 mt (Times-Roman02400240) gf (In ) s
-7.700 nx sp (the ) s sp (non-SRQ ) s sp (based ) s -7.720 nx sp (style ) s -7.700 nx sp
(of ) s sp (operation, ) s -7.720 nx sp (the ) s -7.700 nx sp (message ) s sp (specified ) s
sp (in ) s -7.720 nx sp (the ) s -7.700 nx sp (parameter ) s sp (table ) s -7.720 nx sp (is ) s
-7.700 nx sp (sent ) s sp (to ) s -7.720 nx sp (the ) s -7.700 nx sp 1541 ss
1800 1541 mt (device, the response read back, the response converted to the required VAL field data type as ) s
1829 ss 1800 1829 mt (specified in the parameter table, and a ) s
(Times-Bold02000200) gf (callbackRequest) s (Times-Roman02400240) gf (\(\) is made to ) s
(Times-Bold02000200) gf (dbProcess) s (Times-Roman02400240) gf ( to initiate the second ) s
2117 ss 1800 2117 mt (half of the asynchronous record processing.) s 2485 ss
1800 2485 mt (If any errors are encountered, the record is placed in a VALID_ALARM state before the ) s
(Times-Bold02000200) gf 2773 ss 1800 2773 mt (callbackRequest) s
(Times-Roman02400240) gf (\(\) is made to ) s (Times-Bold02000200) gf (dbProcess) s
(Times-Roman02400240) gf (\(\).) s (Times-Bold02000200) gf 3093 ss 1800 3093 mt
(int devGpibLib_aiGpibWork\(struct gpibDpvt *pdpvt;\)) s 3413 ss 1800 3413 mt (int devGpibLib_biGpibWork\(struct gpibDpvt *pdpvt;\)) s
3733 ss 1800 3733 mt (int devGpibLib_liGpibWork\(struct gpibDpvt *pdpvt;\)) s
4053 ss 1800 4053 mt (int devGpibLib_mbbiGpibWork\(struct gpibDpvt *pdpvt;\)) s
4373 ss 1800 4373 mt (int devGpibLib_stringinGpibWork\(struct gpibDpvt *pdpvt;\)) s
(Times-Roman02800280) gf 4789 ss 1440 4789 mt (1.5.4.2  Finish Functions) s
(Times-Roman02400240) gf 5117 ss 1800 5117 mt (The ) s -10.940 nx sp (finish ) s sp
(functions ) s sp (are ) s sp (used ) s -10.960 nx sp (to ) s -10.940 nx sp (perform ) s sp
(the ) s sp (conversion ) s -10.960 nx sp (of ) s -10.940 nx sp (the ) s sp (data ) s sp (read ) s
sp (back ) s -10.960 nx sp (from ) s -10.940 nx sp (a ) s sp (work ) s sp ( ) s
-10.960 nx sp (function ) s -10.940 nx sp 5405 ss 1800 5405 mt (that processes an input operation. These functions are only used internally by the library's work ) s
5693 ss 1800 5693 mt (and ) s -0.720 nx sp (SRQ ) s -0.740 nx sp (processing ) s sp (functions ) s
-0.720 nx sp (and ) s -0.740 nx sp (are ) s sp (presented ) s -0.720 nx sp (here ) s
-0.740 nx sp (only ) s sp (for ) s -0.720 nx sp (the ) s -0.740 nx sp (sake ) s sp (of ) s
-0.720 nx sp (completeness. ) s -0.740 nx sp (They ) s sp (are ) s -0.720 nx sp
5981 ss 1800 5981 mt (currently not useful except to other functions within the library.) s
(Times-Bold02000200) gf 6301 ss 1800 6301 mt (int devGpibLib_aiGpibFinish\(struct gpibDpvt *pdpvt;\)) s
6621 ss 1800 6621 mt (int devGpibLib_biGpibFinish\(struct gpibDpvt *pdpvt;\)) s
6941 ss 1800 6941 mt (int devGpibLib_liGpibFinish\(struct gpibDpvt *pdpvt;\)) s
7261 ss 1800 7261 mt (int devGpibLib_mbbiGpibFinish\(struct gpibDpvt *pdpvt;\)) s
7581 ss 1800 7581 mt (int devGpibLib_stringinGpibFinish\(struct gpibDpvt *pdpvt;\)) s
(Times-Roman02800280) gf 7997 ss 1440 7997 mt (1.5.4.3  SRQ Functions) s
(Times-Roman02400240) gf 8325 ss 1800 8325 mt (These are used to perform the reading of a message from a device that has already been solicited ) s
8613 ss 1800 8613 mt (by one of the input type work functions described above. They are called by the ) s
(Times-Bold02000200) gf (srqHandler) s (Times-Roman02400240) gf ( ) s 8901 ss
1800 8901 mt (functions in the GPIB device support modules. They simply perform the read operation and call ) s
9189 ss 1800 9189 mt (the finish function associated with the type of record being processed.) s
9557 ss 1800 9557 mt (For more information on handling SRQs see the section "The SRQ Handler.") s
(Times-Bold02000200) gf 9877 ss 1800 9877 mt (int devGpibLib_aiGpibSrq\(struct gpibDpvt *pdpvt; int srqStatus;\)) s
10197 ss 1800 10197 mt (int devGpibLib_biGpibSrq\(struct gpibDpvt *pdpvt; int srqStatus;\)) s
10517 ss 1800 10517 mt (int devGpibLib_liGpibSrq\(struct gpibDpvt *pdpvt; int srqStatus;\)) s
10837 ss 1800 10837 mt (int devGpibLib_mbbiGpibSrq\(struct gpibDpvt *pdpvt; int srqStatus;\)) s
11157 ss 1800 11157 mt (int devGpibLib_stringinGpibSrq\(struct gpibDpvt *pdpvt; int srqStatus;\)) s
(Times-Roman03200320) gf 11621 ss 1440 11621 mt (1.6  General GPIB Problems) s
(Times-Roman02400240) gf 12029 ss 1800 12029 mt (Every ) s -4.400 nx sp (type ) s
sp (of ) s sp (communication ) s sp (system ) s sp (has ) s sp (its ) s sp (problems. ) s sp (The ) s
sp (problems ) s sp (with ) s sp (the ) s sp (use ) s sp (of ) s sp (GPIB ) s sp (instru-) s
12317 ss 1800 12317 mt (ments seem to exist in the fact that vendors simply don't test their GPIB interfaces on their ) s
12605 ss 1800 12605 mt (products.) s 12973 ss 1800 12973 mt (More ) s -10.680 nx sp
(than ) s sp (one ) s -10.700 nx sp (device ) s -10.680 nx sp (that ) s sp (misses ) s
-10.700 nx sp (messages ) s -10.680 nx sp (or ) s -10.700 nx sp (commands ) s
-10.680 nx sp (that ) s sp (are ) s -10.700 nx sp (given ) s -10.680 nx sp (one ) s sp (after ) s
-10.700 nx sp (the ) s -10.680 nx sp (other ) s -10.700 nx sp (because ) s
-10.680 nx sp 13261 ss 1800 13261 mt (they are too close together in time has been identified during the testing of the GPIB support ) s
13549 ss 1800 13549 mt (library. There are handshaking lines that are supposed to throttle the speed, but are apparently ) s
13837 ss 1800 13837 mt (improperly ) s -6.000 nx sp (implemented ) s sp (by ) s sp (device ) s
sp (vendors, ) s sp (or ) s sp (make ) s sp (the ) s sp (\(wrong\) ) s sp (assumption ) s sp (that ) s
sp (the ) s sp (controller ) s sp (in ) s sp 14125 ss 1800 14125 mt (charge is slow in its ability to burst bytes down the bus. The only way that this problem can be ) s
14413 ss 1800 14413 mt (worked around is to add delays in the GPIB device device support modules. The current device ) s
showpage vm_state restore


save /vm_state exch def [1 0 0 -1 0 0] concat 0.050000 0.050000 sc .5 slw
0 -15840 tr 0 ro
np 0 0 mt 0 15840 lnt 12240 15840 lnt 12240 0 lnt cp clip
userdict /#copies 1 put 1253 ss 1800 1253 mt (Times-Roman02400240) gf (support library does not provide any means to do this.) s
1621 ss 1800 1621 mt (Very ) s -2.680 nx sp (often, ) s sp (a ) s sp (device ) s sp (will ) s
-2.700 nx sp (slow ) s -2.680 nx sp (down ) s sp (over ) s sp (800% ) s sp (when ) s
-2.700 nx sp (a ) s -2.680 nx sp (user ) s sp (presses ) s sp (a ) s sp (button ) s
-2.700 nx sp (on ) s -2.680 nx sp (the ) s sp (front ) s sp (panel ) s -2.700 nx sp (of ) s
-2.680 nx sp 1909 ss 1800 1909 mt (the ) s -9.000 nx sp (device. ) s sp (This ) s sp (can ) s
sp (cause ) s sp (the ) s sp (GPIB ) s sp (message ) s sp (transfer ) s sp (to ) s sp (time ) s sp
(out, ) s sp (alarms ) s sp (to ) s sp (be ) s sp (set ) s sp (and ) s sp (so ) s sp (on. ) s sp (When ) s
sp 2197 ss 1800 2197 mt (devices ) s -6.720 nx sp (of ) s sp (this ) s sp (type ) s sp (have ) s
sp (to ) s sp (be ) s sp (used, ) s sp (operators ) s -6.740 nx sp (will ) s -6.720 nx sp (have ) s
sp (to ) s sp (be ) s sp (instructed ) s sp (to ) s sp ("look, ) s sp (but ) s sp (don't ) s
-6.740 nx sp (touch.") s 2565 ss 1800 2565 mt (Some ) s -0.900 nx sp (devices ) s sp (like ) s
sp (to ) s sp (go ) s sp (out ) s sp (to ) s sp (lunch ) s sp (once ) s sp (every ) s sp (hour, ) s
sp (or ) s sp (day ) s sp (or ) s sp (so ) s sp (and ) s sp (not ) s sp (respond ) s sp (to ) s sp (a ) s
sp (command ) s sp 2853 ss 1800 2853 mt (for ) s -3.080 nx sp (up ) s -3.100 nx sp (to ) s
sp (5 ) s sp (seconds ) s -3.080 nx sp (or ) s -3.100 nx sp (so ) s sp (\(the ) s sp (DG ) s
-3.080 nx sp (535 ) s -3.100 nx sp (has ) s sp (done ) s sp (this ) s -3.080 nx sp (on ) s
-3.100 nx sp (more ) s sp (than ) s sp (one ) s -3.080 nx sp (occasion.\) ) s
-3.100 nx sp (This ) s sp (can ) s sp (be ) s sp (more ) s -3.080 nx sp 3141 ss
1800 3141 mt (frustrating that anything else. All that can be said about these types of things is BEWARE of ) s
3429 ss 1800 3429 mt (machines that actually work as advertised. There is probably something wrong with it that won't ) s
3717 ss 1800 3717 mt (surface until it is in use and controlling something very important.) s
4085 ss 1800 4085 mt (Test, ) s -0.240 nx sp (test, ) s -0.260 nx sp (and ) s
-0.240 nx sp (test ) s -0.260 nx sp (your ) s -0.240 nx sp (devices ) s -0.260 nx sp (after ) s
-0.240 nx sp (writing ) s -0.260 nx sp (a ) s -0.240 nx sp (new ) s -0.260 nx sp (device ) s
-0.240 nx sp (support ) s -0.260 nx sp (module. ) s -0.240 nx sp (Many ) s
-0.260 nx sp (devices ) s -0.240 nx sp (can ) s -0.260 nx sp (run ) s -0.240 nx sp
4373 ss 1800 4373 mt (fine ) s -0.540 nx sp (if ) s -0.560 nx sp (doing ) s
-0.540 nx sp (only ) s -0.560 nx sp (three ) s -0.540 nx sp (or ) s -0.560 nx sp (five ) s
-0.540 nx sp (transactions ) s -0.560 nx sp (per ) s -0.540 nx sp (second, ) s
-0.560 nx sp (but ) s -0.540 nx sp (crank ) s -0.560 nx sp (it ) s -0.540 nx sp (up ) s
-0.560 nx sp (to ) s -0.540 nx sp (50 ) s -0.560 nx sp (or ) s -0.540 nx sp (more, ) s
-0.560 nx sp (and ) s -0.540 nx sp (watch ) s -0.560 nx sp (it ) s -0.540 nx sp
4661 ss 1800 4661 mt (go ) s -1.380 nx sp (down ) s sp (in ) s -1.400 nx sp (flames. ) s
-1.380 nx sp (Even ) s -1.400 nx sp (if ) s -1.380 nx sp (all ) s -1.400 nx sp (the ) s
-1.380 nx sp (records ) s -1.400 nx sp (in ) s -1.380 nx sp (an ) s sp (EPICS ) s
-1.400 nx sp (database ) s -1.380 nx sp (are ) s -1.400 nx sp (scanned ) s
-1.380 nx sp (slowly, ) s -1.400 nx sp (they ) s -1.380 nx sp (can ) s -1.400 nx sp (still ) s
-1.380 nx sp 4949 ss 1800 4949 mt (get processed in bursts. EPICS can actually process over 20,000 records in one second if they are ) s
5237 ss 1800 5237 mt (all ) s -6.220 nx sp (ready ) s -6.240 nx sp (to ) s sp (go ) s sp
(at ) s sp (the ) s sp (same ) s sp (time. ) s sp (And ) s sp (if ) s sp (there ) s -6.220 nx sp (are ) s
-6.240 nx sp (enough ) s sp (records ) s sp (tied ) s sp (to ) s sp (the ) s sp (same ) s sp (device ) s
sp (there ) s sp (is ) s sp (no ) s -6.220 nx sp 5525 ss 1800 5525 mt (telling how fast the device will be pushed.) s
showpage vm_state restore

%%Trailer
%%DocumentNeededResources: font Times-Roman Times-Bold Times-Italic

 
end %%% IslandWrite
%%EOF
