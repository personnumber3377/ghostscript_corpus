/**
 * MIT License
 *
 * Copyright (c) 2021 Sytner
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
**/

// http://kpulv.com/359/Dev_Log__Color_Grading_Shader/ for sample function

sampler gbuffer0 : register(s0);
sampler lut : register(s1);
float4 texelInfo : register(c85);
float4 lutSize : register(c87);

float4 sampleAs3DTexture(in float3 uv, in float width) 
{
    float sliceSize = 1.0 / width;              // space of 1 slice
    float slicePixelSize = sliceSize / width;           // space of 1 pixel
    float sliceInnerSize = slicePixelSize * (width - 1.0);  // space of width pixels
    float zSlice0 = min(floor(uv.z * width), width - 1.0);
    float zSlice1 = min(zSlice0 + 1.0, width - 1.0);
    float xOffset = slicePixelSize * 0.5 + uv.x * sliceInnerSize;
    float s0 = xOffset + (zSlice0 * sliceSize);
    float s1 = xOffset + (zSlice1 * sliceSize);
    float4 slice0Color = tex2Dlod(lut, float4(s0, uv.y,0,0));
    float4 slice1Color = tex2Dlod(lut, float4(s1, uv.y,0,0));
    float zOffset = (uv.z * width) % 1.0;
    float4 result = lerp(slice0Color, slice1Color, zOffset);
    return result;
}

float4 main
(
	in float4 position  : POSITION0,
	in float2 uv        : TEXCOORD0
)
: COLOR
{
	float4 col = tex2D(gbuffer0, uv + texelInfo.xy);
	return float4(sampleAs3DTexture(col.rgb, lutSize.y).rgb, col.a);
}