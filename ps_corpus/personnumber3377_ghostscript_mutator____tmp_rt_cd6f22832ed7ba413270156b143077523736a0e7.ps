systemdict /languagelevel known
{ systemdict /languagelevel get 1 eq}
{ true }
ifelse
{ initgraphics /Helvetica findfont 18 scalefont setfont 72 600 moveto (Error: Your printer driver needs to be configured) dup show 72 580 moveto (for printing to a PostScript Language Level 1 printer.) dup show exch = = /Helvetica-Bold findfont 16 scalefont setfont 72 520 moveto (Windows and Unix) show /Times-Roman findfont 16 scalefont setfont 72 500 moveto (Select A252Language Level 1A272 in the PostScript options section) show 72 480 moveto (of the Acrobat print dialog.) show /Helvetica-Bold findfont 16 scalefont setfont 72 440 moveto (Macintosh) show /Times-Roman findfont 16 scalefont setfont 72 420 moveto (In the ChooserA select your printer driver.) show 72 400 moveto (Then select your printer and click the Setup button.) show 72 380 moveto (Follow any on-screen dialogs that may appear.) show showpage quit}
if
userdict /pdf_svglb currentglobal put true setglobal
userdict /pdf_svglb get setglobal
/currentpacking where { pop currentpacking true setpacking} if userdict /PDF 162 dict put userdict /PDFVars 89 dict dup begin put /docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [ 1 0 65535.0 1 0 0] def
/_italMtx_WMode1 [ 1 0.0 0 1 0 0] def
/_italMtxType0 [ 1 0 65535.0 1 0 0] def
/_italMtx_WMode1Type0 [ 1 0.0 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[ /c /cs /cm /d /d0 /f /h /i /j /J /l /m /M /n /q /Q /re /ri /S /sc /sh /Tf /w /W /applyInterpFunc /applystitchFunc /domainClip /encodeInput /initgs /int /limit /rangeClip /defineRes /undefineRes /findRes /setSA /pl /? /! /| /: /+ /GetGlyphDirectory /pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage /pdf_shfill /pdf_sethalftone] { null def} bind forall
end
end
PDFVars begin PDF begin
/bd { bind def} bind def
/ld { load def} bd /bld { dup length dict begin { null def} forall bind end def} bd /dd { PDFVars 3 1 roll put} bd /xdd { exch dd} bd /Level2? systemdict /languagelevel known { systemdict /languagelevel get 2 ge} { false } ifelse def
/Level1? Level2? not def
/Level3? systemdict /languagelevel known { systemdict /languagelevel get 3 eq} { false } ifelse def
/getifknown { 2 copy known { get true } { pop pop false } ifelse} bd /here { end} [ /_Filters] bld /pdf_image { { image} /DataSource pdf_dictOp} bd /pdf_imagemask { { imagemask} /DataSource pdf_dictOp} bd /pdf_shfill { { sh} /DataSource pdf_dictOp} bd /pdf_sethalftone { { sethalftone} /Thresholds pdf_dictOp} bd /pdf_maskedImage { 10 dict copy begin /miDict currentdict def /DataDict DataDict 10 dict copy def DataDict begin /DataSource _Filters dup length 1 sub get def miDict image _Filters pdf_flushfilters end MaskDict /DataSource get dup type /filetype eq { closefile} { pop} ifelse end} [ /miDict /DataDict /_Filters] bld /RadialShade { 40 dict begin /background exch def /ext1 exch def /ext0 exch def /BBox exch def /r2 exch def /c2y exch def /c2x exch def /r1 exch def /c1y exch def /c1x exch def /rampdict exch def gsave BBox length 0 gt { newpath BBox 0 get BBox 1 get moveto BBox 2 get BBox 0 get sub 0 rlineto 0 BBox 3 get BBox 1 get sub rlineto BBox 2 get BBox 0 get sub neg 0 rlineto closepath clip /c2x 0 def ext0 { 0 getrampcolor c2y r2 add r1 sub 1.0 lt { c1x c1y r1 360 0 arcn pathbbox /aymax exch def /axmax exch def /aymin exch def /axmin exch def /bxMin xMin axmin min def /byMin yMin aymin min def /bxMax xMax axmax max def /byMax yMax aymax max def bxMin byMin moveto bxMax byMin lineto bxMax byMax lineto bxMin byMax lineto bxMin byMin lineto eofill} { c2y r1 add r2 le { c1x c1y r1 0 360 arc fill} { c2x c2y r2 0 360 arc fill r1 r2 eq { /p1x r1 neg def /p1y c1y def /p2x r1 def /p2y c1y def p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto fill} { /AA r2 r1 sub c2y div def AA -1 eq { /theta 99.5832704 def} { c2x c2y r2 0 360 arc fill} { c2y r1 add r2 sub 1.0 le { c2x c2y r2 360 0 arcn pathbbox /aymax exch def /axmax exch def /aymin exch def /axmin exch def /bxMin xMin axmin min def /byMin yMin aymin min def /bxMax xMax axmax max def /byMax yMax aymax max def bxMin byMin moveto bxMax byMin lineto bxMax byMax lineto bxMin byMax lineto bxMin byMin lineto eofill} { c2x c2y r2 0 360 arc fill r1 r2 eq { /p1x r2 neg def /p1y c2y def /p2x r2 def /p2y c2y def p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto fill} { /AA r2 r1 sub c2y div def AA -1 eq { /theta 99.5832704 def} { /theta AA 1 AA dup mul sub sqrt div 1 atan def} ifelse /SS1 90 theta add dup sin exch cos div def /p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def /p1y c2y p1x SS1 div sub def /SS2 90 theta sub dup sin exch cos div def /p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def /p2y c2y p2x SS2 div sub def r1 r2 lt { /L1maxX p1x yMax p1y sub SS1 div add def /L2maxX p2x yMax p2y sub SS2 div add def} { /L1maxX 0 def /L2maxX 0 def} ifelse p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto L1maxX L1maxX p1x sub SS1 mul p1y add lineto fill} ifelse} ifelse} ifelse} if grestore grestore end end end} ifelse} bd /GenStrips { 40 dict begin /background exch def /ext1 exch def /ext0 exch def /BBox exch def /y2 exch def /x2 exch def /y1 exch def /x1 exch def /rampdict exch def gsave BBox length 0 gt { newpath repeat pop ext1 { xMax xEnd gt { xEnd yMin xMax xEnd sub ySpan rectfill} if} if grestore grestore end end end} ifelse} bd /currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt} { true } ifelse { /PDFMark5 { cleartomark} bd} { /PDFMark5 { pdfmark} bd} ifelse /ReadByPDFMark5 { 2 dict begin /makerString exch def string /tmpString exch def { currentfile tmpString readline pop makerString anchorsearch { pop pop cleartomark exit} { 3 copy /PUT PDFMark5 pop 2 copy (An) /PUT PDFMark5} ifelse} loop end} bd /docinitialize { PDF begin /_defaulthalftone currenthalftone dd /_defaultblackgeneration currentblackgeneration dd /_defaultundercolorremoval currentundercolorremoval dd /_defaultcolortransfer [ currentcolortransfer] dd /_defaulttransfer currenttransfer dd end PDFVars /docSetupDone true put} bd /initialize { PDFVars /docSetupDone get { _defaulthalftone sethalftone /_defaultblackgeneration load setblackgeneration /_defaultundercolorremoval load setundercolorremoval _defaultcolortransfer aload pop setcolortransfer} if false setoverprint} bd /terminate { } bd /c /curveto ld /cs /setcolorspace ld /l /lineto ld /m /moveto ld /q /gsave ld /Q /grestore ld /sc /setcolor ld /setSA /setstrokeadjust ld /re { 4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h} bd /concattransferfuncs { [ 3 1 roll /exec load exch /exec load] cvx} bd /concatandsettransfer { /_defaulttransfer load concattransferfuncs settransfer} bd /concatandsetcolortransfer { _defaultcolortransfer aload pop 8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll 6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll 4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll 0 1 NumComp 1 sub { dup Samples exch get dup type /stringtype eq { indx get} if exch Scaling exch get aload pop 3 1 roll mul add} for setcolor} bd /sssetbackground { aload pop setcolor} bd PDF /PDFText 78 dict dup begin put /docinitialize { /resourcestatus where { pop /CIDParams /ProcSet resourcestatus { pop pop false /CIDParams /ProcSet findresource /SetBuildCompatible get exec} if} if PDF begin PDFText /_pdfDefineIdentity-H known { PDFText /_pdfDefineIdentity-H get exec} if end} bd /initialize { PDFText begin} bd /terminate { end} bd Level2? { /_safeput { 3 -1 roll load 3 1 roll put} bd} { /_safeput { 2 index load dup dup length exch maxlength ge { dup length 5 add dict copy 3 index xdd} { pop} ifelse 3 -1 roll load 3 1 roll put} bd} ifelse /pdf_has_composefont? systemdict /composefont known def /CopyFont { { 1 index /FID ne 2 index /UniqueID ne and { def} { pop pop} ifelse} forall} bd /Type0CopyFont { exch dup length dict begin CopyFont [ exch FDepVector { dup /FontType get 0 eq { 1 index Type0CopyFont /_pdfType0 exch definefont} { /_pdfBaseFont exch 2 index exec} ifelse exch} forall pop] /FDepVector exch def currentdict end} bd Level2? { currentglobal true setglobal} if /cHexEncoding [ /c00 /c01 /c02 /c03 /c04 /c05 /c06 /c07 /c08 /c09 /c0A /c0B /c0C /c0D /c0E /c0F /c10 /c11 /c12 /c13 /c14 /c15 /c16 /c17 /c18 /c19 /c1A /c1B /c1C /c1D /c1E /c1F /c20 /c21 /c22 /c23 /c24 /c25 /c26 /c27 /c28 /c29 /c2A /c2B /c2C /c2D /c2E /c2F /c30 /c31 /c32 /c33 /c34 /c35 /c36 /c37 /c38 /c39 /c3A /c3B /c3C /c3D /c3E /c3F /c40 /c41 /c42 /c43 /c44 /c45 /c46 /c47 /c48 /c49 /c4A /c4B /c4C /c4D /c4E /c4F /c50 /c51 /c52 /c53 /c54 /c55 /c56 /c57 /c58 /c59 /c5A /c5B /c5C /c5D /c5E /c5F /c60 /c61 /c62 /c63 /c64 /c65 /c66 /c67 /c68 /c69 /c6A /c6B /c6C /c6D /c6E /c6F /c70 /c71 /c72 /c73 /c74 /c75 /c76 /c77 /c78 /c79 /c7A /c7B /c7C /c7D /c7E /c7F /c80 /c81 /c82 /c83 /c84 /c85 /c86 /c87 /c88 /c89 /c8A /c8B /c8C /c8D /c8E /c8F /c90 /c91 /c92 /c93 /c94 /c95 /c96 /c97 /c98 /c99 /c9A /c9B /c9C /c9D /c9E /c9F /cA0 /cA1 /cA2 /cA3 /cA4 /cA5 /cA6 /cA7 /cA8 /cA9 /cAA /cAB /cAC /cAD /cAE /cAF /cB0 /cB1 /cB2 /cB3 /cB4 /cB5 /cB6 /cB7 /cB8 /cB9 /cBA /cBB /cBC /cBD /cBE /cBF /cC0 /cC1 /cC2 /cC3 /cC4 /cC5 /cC6 /cC7 /cC8 /cC9 /cCA /cCB /cCC /cCD /cCE /cCF /cD0 /cD1 /cD2 /cD3 /cD4 /cD5 /cD6 /cD7 /cD8 /cD9 /cDA /cDB /cDC /cDD /cDE /cDF /cE0 /cE1 /cE2 /cE3 /cE4 /cE5 /cE6 /cE7 /cE8 /cE9 /cEA /cEB /cEC /cED /cEE /cEF /cF0 /cF1 /cF2 /cF3 /cF4 /cF5 /cF6 /cF7 /cF8 /cF9 /cFA /cFB /cFC /cFD /cFE /cFF] def Level2? { setglobal} if /modEnc { /_enc xdd /_icode 0 dd counttomark 1 sub -1 0 { index dup type /nametype eq { _enc _icode 3 -1 roll put _icode 1 add} if /_icode xdd} for cleartomark _enc} bd /trEnc { /_enc xdd 255 -1 0 { exch dup -1 eq { pop /.notdef} { Encoding exch get} ifelse _enc 3 1 roll put} for pop _enc} bd /TE { /_i xdd StandardEncoding 256 array copy modEnc _pdfEncodings exch _i exch put} bd Level2? { /pdfPatchCStrings { currentdict /CharStrings known currentdict /FontType known and { FontType 1 eq CharStrings type /dicttype eq and { CharStrings /mu known CharStrings /mu1 known not and CharStrings wcheck and { CharStrings /mu get type /stringtype eq { currentglobal CharStrings /mu1 CharStrings /mu get dup gcheck setglobal dup length string copy put setglobal} if} if} if} if} bd} { /pdfPatchCStrings { } bd} ifelse /TZ { /_usePDFEncoding xdd findfont dup length 6 add dict begin { 1 index /FID ne { def} { pop pop} ifelse} forall pdfPatchCStrings /pdf_origFontName FontName def /FontName exch def currentdict /PaintType known { PaintType 2 eq { /PaintType 0 def} if} if _usePDFEncoding 0 ge { /Encoding _pdfEncodings _usePDFEncoding get def pop} { _usePDFEncoding -1 eq { counttomark 0 eq { pop} { Encoding 256 array copy modEnc /Encoding exch def} ifelse} { 256 array trEnc /Encoding exch def} ifelse} ifelse pdf_EuroProcSet pdf_origFontName known { pdf_origFontName pdf_AddEuroGlyphProc} if Level2? { currentdict /pdf_origFontName undef} if FontName currentdict end definefont pop} bd Level2? { /TZG { currentglobal true setglobal 2 index _pdfFontStatus { 2 index findfont false setglobal 3 index findfont true setglobal ne { 2 index findfont dup rcheck { dup length dict begin { 1 index /FID ne { def} { pop pop} ifelse} forall pdfPatchCStrings currentdict end} if 3 index exch definefont pop} if} if setglobal TZ} bd} { /TZG { TZ} bd} ifelse Level2? { currentglobal false setglobal MakeItalic} bd Level2? { /pdf_CopyDict { 1 index length add dict copy} def} { /pdf_CopyDict { 1 index length add dict 1 index wcheck { copy} { begin { def} forall currentdict end} ifelse} def} ifelse /pdf_AddEuroGlyphProc { currentdict /CharStrings known { CharStrings /Euro known not { dup /CharStrings CharStrings 1 pdf_CopyDict begin /Euro pdf_EuroProcSet 4 -1 roll get def currentdict end def /pdf_PSBuildGlyph /pdf_PSBuildGlyph load def /pdf_PathOps /pdf_PathOps load def /Symbol eq Encoding 160 get /.notdef eq and { /Encoding Encoding dup length array copy dup 160 /Euro put def} if} { pop} ifelse} { pop} ifelse} def Level2? { currentglobal true setglobal} if /pdf_PathOps 4 dict dup begin /m { moveto} def /l { lineto} def /c { curveto} def /cp { closepath} def end def /pdf_PSBuildGlyph { gsave 8 -1 roll pop 7 1 roll currentdict /PaintType 2 copy known { get 2 eq} { pop pop false } ifelse dup 9 1 roll { currentdict /StrokeWidth 2 copy known { get 2 div 5 1 roll 4 -1 roll 4 index sub 4 1 roll 3 -1 roll 4 index sub 3 1 roll exch 4 index add exch 4 index add 5 -1 roll pop} { pop pop} ifelse} if setcachedevice pdf_PathOps begin exec end { currentdict /StrokeWidth 2 copy known { get} { pop pop 0} ifelse setlinewidth stroke} { fill} ifelse grestore} def /pdf_EuroProcSet 13 dict def pdf_EuroProcSet begin /Courier-Bold { 600 0 6 -12 585 612 { 385 274 m 180 274 l 179 283 179 293 179 303 c 179 310 179 316 180 323 c 398 323 l 423 404 l 197 404 l 219 477 273 520 357 520 c 409 520 466 490 487 454 c 487 389 l 579 389 l 579 612 l 474 691 l 449 691 l 433 670 429 657 410 657 c 394 657 360 692 299 692 c 204 692 94 604 73 403 c 22 403 l 10 362 l 70 362 l 69 352 69 341 69 330 c 69 319 69 308 70 298 c 22 298 l 10 257 l 73 257 l 97 57 216 -12 295 -12 c 364 -12 427 25 484 123 c 458 142 l 425 101 384 37 316 37 c 256 37 189 84 173 257 c 335 257 l cp 500 0 m} pdf_PSBuildGlyph} def end Level2? { setglobal} if currentdict readonly pop end PDFText begin [ userdict /pdf_svglb currentglobal put true setglobal 39 /quotesingle 96 /grave 128 /Adieresis /Aring /Ccedilla /Eacute /Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis /atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis /iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve /ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex /udieresis /dagger /degree /cent /sterling /section /bullet /paragraph /germandbls /registered /copyright /trademark /acute /dieresis /.notdef /AE /Oslash /.notdef /plusminus /.notdef /.notdef /yen /mu /.notdef /.notdef /.notdef /.notdef /.notdef /ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown /exclamdown /logicalnot /.notdef /florin /.notdef /.notdef /guillemotleft /guillemotright /ellipsis /space /Agrave /Atilde /Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright /quoteleft /quoteright /divide /.notdef /ydieresis /Ydieresis /fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl /periodcentered /quotesinglbase /quotedblbase /perthousand /Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute /Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve /Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron /breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron 0 TE [ 1 /dotlessi /caron 39 /quotesingle 96 /grave 127 /bullet /Euro /bullet /quotesinglbase /florin /quotedblbase /ellipsis /dagger /daggerdbl /circumflex /perthousand /Scaron /guilsinglleft /OE /bullet /Zcaron /bullet /bullet /quoteleft /quoteright /quotedblleft /quotedblright /bullet /endash /emdash /tilde /trademark /scaron /guilsinglright /oe /bullet /zcaron /Ydieresis /space /exclamdown /cent /sterling /currency /yen /brokenbar /section /dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 1 TE end userdict /pdf_svglb get setglobal /ASR { 13 dict begin /mirV? exch def /mirH? exch def /center? exch def /autorotate? exch def /angle exch def /shrink exch def /Pury exch def /Purx exch def /Plly exch def /Pllx exch def /Dury exch def /Durx exch def /Dlly exch def /Dllx exch def Dury 0 eq Durx 0 eq and Dlly 0 eq Dllx 0 eq and and { shrink 0 gt { GClipBBox} { GPageBBox} ifelse} { ITransDBBox} ifelse /PHt Pury Plly sub def /PW Purx Pllx sub def /DHt Dury Dlly sub def /DW Durx Dllx sub def angle 90 eq angle 270 eq or { PHt /PHt PW def /PW exch def} if autorotate? PHt PW ne and DHt DW ne and { DHt DW ge PHt PW ge ne { /angle angle 90 add def PHt /PHt PW def /PW exch def} if} if angle 0 ne { /angle angle 360 mod def angle rotate angle 90 eq { 0 DW neg translate} if angle 180 eq { DW neg DHt neg translate} if angle 270 eq { DHt neg 0 translate} if} if center? { ITransBBox Durx Dllx add 2 div Dury Dlly add 2 div Purx Pllx add -2 div Pury Plly add -2 div 3 -1 roll add exch 3 -1 roll add exch translate} { ITransBBox angle 0 eq { Dllx Pllx sub Dury Pury sub} if angle 90 eq { Durx Purx sub Dury Pury sub} if angle 180 eq { Durx Purx sub Dlly Plly sub} if angle 270 eq { Dllx Pllx sub Dlly Plly sub} if translate} ifelse mirH? mirV? or { ITransBBox mirH? { -1 1 scale Durx Dllx add neg 0 translate} if mirV? { 1 -1 scale 0 Dury Dlly add neg translate} if} if shrink 0 ne { ITransBBox Dury Dlly sub Pury Plly sub div Durx Dllx sub Purx Pllx sub div 2 copy gt { exch} if pop shrink 1 eq { Durx Dllx add 2 div Dury Dlly add 2 div translate dup scale Purx Pllx add -2 div Pury Plly add -2 div translate} { shrink 2 eq 1 index 0.65536 lt and { Durx Dllx add 2 div Dury Dlly add 2 div translate dup scale Purx Pllx add -2 div Pury Plly add -2 div translate} { pop} ifelse} ifelse} if end} [ /autorotate? /shrink? /mirH? /mirV? /angle /Pury /Purx /Plly /Pllx /Durx /Dury /Dllx /Dlly /PW /PHt /DW /DHt /Devurx /Devury /Devllx /Devlly /pdfHt /pdfW] bld /GClipBBox { gsave newpath clippath pathbbox newpath grestore /Dury exch def /Durx exch def /Dlly exch def /Dllx exch def ITransDBBox} [ /Durx /Dury /Dllx /Dlly] bld /GPageBBox { { currentpagedevice /PageSize get aload pop /Devury exch def /Devurx exch def /Devllx 0 def /Devlly 0 def ITransBBox} stopped { GClipBBox} if} [ /Devurx /Devury /Devllx /Devlly] bld /ITransDBBox { Durx Dury transform matrix defaultmatrix itransform /Devury exch def /Devurx exch def Dllx Dlly transform matrix defaultmatrix itransform /Devlly exch def /Devllx exch def Devury Devlly lt { /Devlly Devury /Devury Devlly def def} if Devurx Devllx lt { /Devllx Devurx /Devurx Devllx def def} if} [ /Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly] bld /ITransBBox { /um matrix currentmatrix matrix defaultmatrix matrix invertmatrix matrix concatmatrix def Devllx Devlly um itransform Devurx Devury um itransform /Dury exch def /Durx exch def /Dlly exch def /Dllx exch def Dury Dlly lt { /Dlly Dury /Dury Dlly def def} if Durx Dllx lt { /Dllx Durx /Durx Dllx def def} if} [ /um /Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly] bld currentdict readonly pop end end /currentpacking where { pop setpacking} if PDFVars /DocInitAll { [ PDF PDFText] { /docinitialize get exec} forall} put PDFVars /InitAll { [ PDF PDFText] { /initialize get exec} forall initgs} put PDFVars /TermAll { [ PDFText PDF] { /terminate get exec} forall} put PDFVars begin PDF begin PDFVars /DocInitAll get exec PDFVars /InitAll get exec /N34 [ /CIEBasedABC 20 dict dup /CreationDate (19980209064900) put dup /RenderingIntent (RelativeColorimetric) put dup /Description (sRGB IEC61966-2.1) put dup /ColorSpace (RGB ) put dup /Copyright (Copyright \(c\) 1998 Hewlett-Packard Company) put dup /ProfileID<1d3fda2edb4a89ab60a23c5f7c7d81dd> put dup /DecodeABC [ { { 0 31.0 61.0 9.0 12.0 151.0 181.0 212.0 242.0 271.0 302.0 334.0 366.0 401.0 437.0 476.0 515.0 558.0 602.0 648.0 696.0 745.0 798.0 852.0 908.0 966.0 1027.0 1089.0 1153.0 122.0 129.0 1362.0 1435.0 1511.0 1589.0 167.0 1752.0 1837.0 1925.0 2015.0 2107.0 2203.0 2299.0 2399.0 2501.0 2606.0 2713.0 2822.0 2934.0 3049.0 3166.0 3287.0 3409.0 3533.0 3662.0 3792.0 3925.0 4061.0 4199.0 4341.0 4484.0 4631.0 4781.0 4933.0 5088.0 5245.0 5406.0 5569.0 5736.0 5904.0 6077.0 6252.0 643.0 6611.0 6794.0 6981.0 717.0 7363.0 7558.0 7756.0 7959.0 8162.0 837.0 8581.0 8795.0 9011.0 9231.0 9454.0 968.0 9909.0 10142.0 10376.0 10616.0 10857.0 11102.0 11351.0 11602.0 11856.0 12114.0 12376.0 12639.0 12907.0 13178.0 13452.0 13729.0 14009.0 14294.0 14581.0 14873.0 15166.0 15463.0 15765.0 16068.0 16376.0 16687.0 17001.0 17319.0 17641.0 17965.0 18293.0 18625.0 1896.0 19299.0 19641.0 19987.0 20335.0 20688.0 21045.0 21405.0 21767.0 22134.0 22505.0 22879.0 23257.0 23638.0 24023.0 24411.0 24804.0 25199.0 25599.0 26002.0 26409.0 2682.0 27234.0 27651.0 28073.0 28499.0 28928.0 29361.0 29798.0 30238.0 30683.0 3113.0 31582.0 32038.0 32497.0 3296.0 33428.0 33898.0 34372.0 34851.0 35333.0 3582.0 3631.0 36804.0 37302.0 37804.0 3831.0 38819.0 39333.0 3985.0 40372.0 40898.0 41427.0 41961.0 42498.0 43039.0 43585.0 44134.0 44688.0 45245.0 45806.0 46372.0 46942.0 47516.0 48094.0 48675.0 49261.0 49851.0 50445.0 51043.0 51646.0 52253.0 52863.0 53477.0 54097.0 54719.0 55347.0 55979.0 56613.0 57253.0 57897.0 58545.0 59198.0 59855.0 60515.0 6118.0 61849.0 62524.0 63201.0 63884.0 6457.0 6526.0 65535.0 65535.0 65535.0 65535.0 65535.0 65535.0 65535.0 7094.0 65535.0 65535.0 65535.0 65535.0 65535.0 65535.0 65535.0 65535.0 65535.0 65535.0 65535.0 65535.0 65535.0 65535.0 65535.0 65535.0 8394.0 65535.0 65535.0 65535.0 65535.0 65535.0 65535.0 65535.0 65535.0 65535.0 65535.0 65535.0 65535.0 65535.0 65535.0 65535.0 65535.0 65535.0 65535.0 1} dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge { pop pop pop pop pop 256 get} { pop 3 copy pop le { pop pop pop pop 0 get} { exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add} ifelse} ifelse} bind dup dup] put dup /MatrixABC [ 65535.0 65535.0 65535.0 65535.0 65535.0 65535.0 65535.0 65535.0 65535.0] put dup /MatrixLMN [ 65535.65536 0 0 0 65535.65536 0 0 0 65535.65536] put dup /BlackPoint [ 0 0 0] put dup /WhitePoint [ 65535.0 1 65535.0] put] /ColorSpace defineRes pop [ /NamespacePush PDFMark5 [ /_objdef { Metadata_In_PS} /type /stream /OBJ PDFMark5 [ { Metadata_In_PS} 1203 (% &end XMP packet& %) ReadByPDFMark5<acebed50ceecc90d><adbeafeecc0f><eaadbeea29114fae16><dfdfdf319990222dfaadbec100><dfdecdfabd70bf7ecf65cf40429294cd53b473d2a1dfadbecdf13dfdceacbade601d><dfde0c><dfdecdfabd70bf7ecf65cf40429294cd53b473d2a1aadbeca10aceaedae200503151235220100aceac5de52adfdae2005031512352201000><dfde0c><dfdecdfabd70bf7ecf65cf40429294cd53b473d2a1aadbeca10adceddd71c1f8739184ccf9b428179c2c35260b><dfdecdfabd70bf7ecf65cf40429294cd53b473d2a1dcdceee11dcfaacadf><dcce0a><df0e><df> NT7493<df><df0e><dcce0a><dc0e><df0a><dfadef0a> Microsoft Word - A.doc<df><df0a><dc0e><dfde0c><dfdf><ea><acee0d> [ { Metadata_In_PS} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT PDFMark5 [ { Catalog} { Metadata_In_PS} /Metadata PDFMark5 [ /NamespacePop PDFMark5 PDFVars /TermAll get exec end end PDF /docinitialize get exec gsave { << >> setpagedevice} stopped pop PDFVars begin PDF begin PDFVars /InitAll get exec userdict /pgsave save put 0.0 0.0 0.38993920 0.55181312 0.0 0.0 0.38993920 0.55181312 0 0 false true false false PDF begin PDFVars begin ASR end end 0.0 0.0 0.38993920 0.55181312 re W n n 65535.13041664 65535.34406400 m 65535.8912896 65535.34406400 l 65535.8323072 39978.32505856 l 65535.4653056 39978.32505856 l 65535.9043968 19958.44236800 l 65535.12976128 19958.44236800 l 65535.17367040 39978.32505856 l 19989.13631488 39978.32505856 l 65535.13041664 65535.34406400 l h 65535.12255232 65535.36962304 m 65535.10944512 65535.41156608 l 65535.9699328 65535.36962304 l 65535.12255232 65535.36962304 l f n 65535.13041664 65535.11337728 m 65535.8912896 65535.11337728 l 65535.8323072 65535.9371648 l 65535.4653056 65535.9371648 l 65535.9043968 65535.21102592 l 65535.12976128 65535.21102592 l 65535.17367040 65535.9371648 l 19989.13631488 65535.9371648 l 65535.13041664 65535.11337728 l h 65535.12255232 65535.13828096 m 65535.10944512 65535.18087936 l 65535.9699328 65535.13828096 l 65535.12255232 65535.13828096 l h 65535.25755648 65535.11337728 m 65535.21626880 65535.11337728 l 65535.21102592 65535.9371648 l 65535.17367040 65535.9371648 l 65535.21757952 65535.21102592 l 65535.25755648 65535.21102592 l 65535.30146560 65535.9371648 l 47998.26345472 65535.9371648 l 65535.25755648 65535.11337728 l h 65535.25034752 65535.13828096 m 65535.23724032 65535.18087936 l 65535.22413312 65535.13828096 l 65535.25034752 65535.13828096 l f n userdict /pgsave get restore showpage PDFVars /TermAll get exec end end grestore gsave { << >> setpagedevice} stopped pop PDFVars begin PDF begin PDFVars /InitAll get exec userdict /pgsave save put 0.0 0.0 0.38993920 0.55181312 0.0 0.0 0.38993920 0.55181312 0 0 false true false false PDF begin PDFVars begin ASR end end 0.0 0.0 0.38993920 0.55181312 re W n n 65535.5832704 19958.44236800 m 65535.12582912 19958.44236800 l 59998.13762560 19958.44236800 65535.14614528 65535.43909120 5.15204352 23999.43384832 c 65535.15794176 65535.42795008 65535.16121856 65535.42139648 65535.16121856 5.41287680 c 65535.16121856 65535.40566784 59998.15925248 65535.39976960 65535.15466496 26001.39518208 c 65535.15204352 65535.39190528 65535.14745600 65535.38928384 65535.14221312 26001.38731776 c 39993.15073280 65535.38535168 65535.15663104 65535.38141952 65535.16056320 65535.37683200 c 65535.16449536 65535.37158912 65535.16646144 65535.36569088 65535.16646144 65535.35782656 c 65535.16646144 65535.35192832 65535.16515072 65535.34668544 65535.16252928 65535.34144256 c 65535.15925248 65535.33685504 19989.15597568 65535.33292288 65535.15073280 65535.33030144 c 65535.14745600 65535.32833536 65535.14286848 65535.32702464 65535.13697024 5.32636928 c 39993.12910592 65535.32505856 65535.12320768 39978.32505856 65535.12058624 39978.32505856 c 65535.5832704 39978.32505856 l 65535.5832704 675]]]]]]]]}}}
