using namespace metal;


// VARYING
struct VertexOutput
{
	float4 position [[position]];
	float2 TexCoord0;
	float2 TexCoord1;
	float2 TexCoord2;
	float2 TexCoord3;
	float2 TexCoord4;
	float2 TexCoord5;
	float2 TexCoord6;
	float2 TexCoord7;
};

// UNIFORM
struct PSConstants
{
    float BloomIntensity;
    float BloomThreshold;
    int BloomFactor;
    float HorizontalBloomWeights[5];  
    float VerticalBloomWeights[5];  
};


fragment float4 DownSamplePass (
	VertexOutput in [[stage_in]]
	, constant PSConstants &constants[[buffer(0)]]
	, texture2d<float> texture0 [[texture(0)]]
	, sampler sampler0 [[sampler(0)]]
	, texture2d<float> texture1 [[texture(1)]]
	, sampler sampler1 [[sampler(1)]]
	)
{ 
	float4 output;
	float4 average = float4(0.0, 0.0, 0.0, 0.0);
	average += texture0.sample(sampler0, in.TexCoord0.xy);
	average += texture0.sample(sampler0, in.TexCoord1.xy);
	average += texture0.sample(sampler0, in.TexCoord2.xy);
	average += texture0.sample(sampler0, in.TexCoord3.xy);
	average += texture0.sample(sampler0, in.TexCoord4.xy);
	average += texture0.sample(sampler0, in.TexCoord5.xy);
	average += texture0.sample(sampler0, in.TexCoord6.xy);
	average += texture0.sample(sampler0, in.TexCoord7.xy);
	average *= ( 1.0 / 8.0 );
	
	float luminance = dot( average.xyz, float3( 0.299, 0.587, 0.114 ) );
	
	if(luminance < constants.BloomThreshold)
	{
		average *= pow(abs(luminance / constants.BloomThreshold), float(constants.BloomFactor));
	}
	
	output = average;
	return output;
}



fragment float4 BrightnessPass (
	VertexOutput in [[stage_in]]
	, constant PSConstants &constants[[buffer(0)]]
	, texture2d<float> texture0 [[texture(0)]]
	, sampler sampler0 [[sampler(0)]]
	, texture2d<float> texture1 [[texture(1)]]
	, sampler sampler1 [[sampler(1)]]
	)
{
	float4 output;
	float4 average = texture0.sample(sampler0, in.TexCoord0.xy);
	float luminance = dot( average.xyz, float3( 0.299, 0.587, 0.114 ) );
	
	if(luminance < constants.BloomThreshold)
	{
		average *= pow(abs(luminance / constants.BloomThreshold), float(constants.BloomFactor));
	}
	
	output = average;
	return output;
}


     
fragment float4 HorizontalBlurPass (
	VertexOutput in [[stage_in]]
	, constant PSConstants &constants[[buffer(0)]]
	, texture2d<float> texture0 [[texture(0)]]
	, sampler sampler0 [[sampler(0)]]
	, texture2d<float> texture1 [[texture(1)]]
	, sampler sampler1 [[sampler(1)]]
	)
{
	float4 output;
	float4 color = float4(0.0, 0.0, 0.0, 0.0);

	color += texture0.sample(sampler0, in.TexCoord0.xy) * constants.HorizontalBloomWeights[0];
	color += texture0.sample(sampler0, in.TexCoord1.xy) * constants.HorizontalBloomWeights[1];
	color += texture0.sample(sampler0, in.TexCoord2.xy) * constants.HorizontalBloomWeights[2];
	color += texture0.sample(sampler0, in.TexCoord3.xy) * constants.HorizontalBloomWeights[3];
	color += texture0.sample(sampler0, in.TexCoord4.xy) * constants.HorizontalBloomWeights[4];
	
	output = float4( color.xyz, 1.0 );
	return output;
}


         
fragment float4 VerticalBlurPass (
	VertexOutput in [[stage_in]]
	, constant PSConstants &constants[[buffer(0)]]
	, texture2d<float> texture0 [[texture(0)]]
	, sampler sampler0 [[sampler(0)]]
	, texture2d<float> texture1 [[texture(1)]]
	, sampler sampler1 [[sampler(1)]]
	)
{
	float4 output;
	float4 color = float4(0.0, 0.0, 0.0, 0.0);

	color += texture0.sample(sampler0, in.TexCoord0.xy) * constants.VerticalBloomWeights[0];
	color += texture0.sample(sampler0, in.TexCoord1.xy) * constants.VerticalBloomWeights[1];
	color += texture0.sample(sampler0, in.TexCoord2.xy) * constants.VerticalBloomWeights[2];
	color += texture0.sample(sampler0, in.TexCoord3.xy) * constants.VerticalBloomWeights[3];
	color += texture0.sample(sampler0, in.TexCoord4.xy) * constants.VerticalBloomWeights[4];

	float4 src = texture1.sample(sampler1, in.TexCoord5.xy);
	float3 final = src.xyz + constants.BloomIntensity * color.xyz;
	output = float4( final.xyz, 1.0 );    
	return output;
}