#include "common.h"

//#define USE_ORIGINAL_SSAO
//#define HBAO_WORLD_JITTER

#include "lmodel.h"
#include "pbs.h"

uniform	Texture2D		s_half_depth;


#ifdef HDAO
#	define USE_HDAO 1
#endif

#if SSAO_QUALITY <=3
#else
#	ifndef USE_HDAO
#		define USE_HDAO
#	endif
#endif

#ifdef USE_HDAO
#	if SSAO_QUALITY > 3
#		include	"ssao_hdao_new.ps"
#	endif
#	define USE_HDAO_CODE
#	if SSAO_QUALITY <=3
#		define	g_f2RTSize	( pos_decompression_params2.xy )
#		define	g_txDepth	s_position
#		define	g_txNormal	s_position
#		include	"ssao_hdao.ps"
#	endif
#else // USE_HDAO
#	ifdef	USE_HBAO
#		include	"ssao_hbao.ps"
#	else	//	USE_HBAO
#		include	"ssao.ps"
#		include	"ssao_blur.ps"
#	endif	//	USE_HBAO
#endif // USE_HDAO


struct	_input
{
	float4	tc0		: TEXCOORD0;	// tc.xy, tc.w = tonemap scale
	float2	tcJ		: TEXCOORD1;	// jitter coords
	float4	pos2d	: SV_Position;
};

struct	_out
{
	float4	low		: SV_Target0;
	float4	high	: SV_Target1;
};

//	TODO:	DX10: Replace Sample with Load
#ifndef MSAA_OPTIMIZATION
_out main ( _input I )
#else
_out main ( _input I, uint iSample : SV_SAMPLEINDEX )
#endif
{

	gbuffer_data	gbd = gbuffer_load_data( GLD_P(I.tc0.xy, I.pos2d.xy, ISAMPLE) );
	
	// Sample the buffers:
	float4	P = float4( gbd.P, gbd.mtl );	// position.metalness
	float4	N = float4( gbd.N, gbd.hemi );		// normal.hemi
	float4	D = float4( gbd.C, gbd.gloss );		// rgb.gloss
#ifndef USE_MSAA
	float4	L = s_accumulator.Sample( smp_nofilter, I.tc0);	// diffuse.specular
#else
	float4	L = s_accumulator.Load( int2( I.pos2d.xy ), ISAMPLE);	// diffuse.specular
#endif

	//  Calculate SSAO

#ifdef USE_HDAO
#	ifdef SM_5
#		if SSAO_QUALITY > 3
    float occ = s_occ.Sample( smp_nofilter, I.tc0).x;	
#		else // SSAO_QUALITY > 3
	float occ = calc_hdao( CS_P(P, N, I.tc0, I.tcJ, I.pos2d, ISAMPLE ) );
#		endif // SSAO_QUALITY > 3
#	else // SM_5
#		if SSAO_QUALITY > 3
	float occ = calc_new_hdao( CS_P(P, N, I.tc0, I.tcJ, I.pos2d, ISAMPLE ) );
#		else // SSAO_QUALITY > 3
	float occ = calc_hdao( CS_P(P, N, I.tc0, I.tcJ, I.pos2d, ISAMPLE ) );
#		endif // SSAO_QUALITY > 3
#	endif // SM_5
#else // USE_HDAO
#	ifdef USE_HBAO
	float occ = calc_hbao( P.z, N, I.tc0, I.pos2d );
#	else // USE_HBAO

#		ifdef USE_SSAO_BLUR	
	float   occ = ssao_blur_ps( I.tc0, ISAMPLE );
#		else
	float2	occ = calc_ssao( CS_P(P, N, I.tc0, I.tcJ, I.pos2d, ISAMPLE ) );
#		endif // USE_SSAO_BLUR

#	endif // USE_HBAO
#endif // USE_HDAO
	
		float4			light			= float4         (L.rgb, L.w)        ;
		float3			color 			= combine_image(D, P, N, L, occ.x, I.tc0);

        // here should be distance fog
        float3        	pos        		= P.xyz;
        float         	distance		= length		(pos);
        float         	fog				= saturate		((distance*fog_params.w + fog_params.x) * (1 - sun_shafts_intensity.x) + sun_shafts_intensity.x); //
                      	color			= lerp     		(color, fog_color.rgb, fog);        			//
        float        	skyblend		= saturate		(fog*fog);

        float          	tm_scale        = I.tc0.w;                // interpolated from VS

//	color 		= N * 0.5 + 0.5;	//show normals
//	color 		= N.w;				//show hemi
//	color 		= occ.xxx;				//show occlusion

        _out        	o;

		tonemap			(o.low, o.high, color, tm_scale );
						o.low.a			= skyblend	;
						o.high.a		= skyblend	;

		return        	o;
}
