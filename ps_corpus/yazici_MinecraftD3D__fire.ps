Texture2D fireTexture : register(t0);
Texture2D noiseTexture : register(t1);
Texture2D alphaTexture : register(t2);
SamplerState SampleType;
SamplerState SampleType2;

cbuffer DistortionBuffer
{
	float2 distortion1;
	float2 distortion2;
	float2 distortion3;
	float distortionScale;
	float distortionBias;
};

// Typedefs
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
   	float2 texCoords1 : TEXCOORD1;
	float2 texCoords2 : TEXCOORD2;
	float2 texCoords3 : TEXCOORD3;
};

// Pixel Shader
float4 PixelShaderMain(PixelInputType input) : SV_TARGET
{
	float4 noise1;
	float4 noise2;
	float4 noise3;
	float4 finalNoise;
	float perturb;
	float2 noiseCoords;
	float4 fireColor;
	float4 alphaColor;

	// Sample the noise texture with the three different scales
    noise1 = noiseTexture.Sample(SampleType, input.texCoords1);
    noise2 = noiseTexture.Sample(SampleType, input.texCoords2);
	noise3 = noiseTexture.Sample(SampleType, input.texCoords3);

	// Convert the ranges from 0-1 to -1 to 1
    noise1 = (noise1 - 0.5f) * 2.0f;
    noise2 = (noise2 - 0.5f) * 2.0f;
    noise3 = (noise3 - 0.5f) * 2.0f;

	// Distort the noise 
	noise1.xy = noise1.xy * distortion1.xy;
	noise2.xy = noise2.xy * distortion2.xy;
	noise3.xy = noise3.xy * distortion3.xy;

	// create a final noise value
	finalNoise = noise1 + noise2 + noise3;

	// create a perturb value where 0 is more distortion and 1 is less disorted
	perturb = ((1.0f - input.tex.y) * distortionScale) + distortionBias;

	// Apply the perturb to the noise to get the final sample texture coordinates
	noiseCoords.xy = (finalNoise.xy * perturb) + input.tex.xy;

	// Sample the fire texture
    fireColor = fireTexture.Sample(SampleType2, noiseCoords.xy);

	// Sample the alpha texture
    alphaColor = alphaTexture.Sample(SampleType2, noiseCoords.xy);

	// Apply the alpha to the fire texture
	fireColor.a = alphaColor;
	
    return fireColor;
}
